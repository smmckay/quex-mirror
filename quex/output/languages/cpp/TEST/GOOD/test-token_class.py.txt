/* -*- C++ -*-   vim: set syntax=cpp: 
 * (C) 2004-2009 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY
 */
#ifndef QUEX_INCLUDE_GUARD__TOKEN__GENERATED__EUROPA__DEUTSCHLAND__BADEN_WUERTEMBERG__ISPRINGEN____MEINTOKEN
#define QUEX_INCLUDE_GUARD__TOKEN__GENERATED__EUROPA__DEUTSCHLAND__BADEN_WUERTEMBERG__ISPRINGEN____MEINTOKEN


 


QUEX_NAMESPACE_TOKEN_OPEN

class MeinToken;

QUEX_INLINE void         MeinToken_construct(MeinToken*);
QUEX_INLINE void         MeinToken_copy(MeinToken*, const MeinToken*);
QUEX_INLINE void         MeinToken_destruct(MeinToken*);

/* NOTE: Setters and getters as in the C++ version of the token class are not
 *       necessary, since the members are accessed directly.                   */

QUEX_INLINE void         MeinToken_set(MeinToken*            me, 
                                          const QUEX_TYPE_TOKEN_ID ID);

#ifdef QUEX_OPTION_TOKEN_TAKE_TEXT_SUPPORT
QUEX_INLINE bool         MeinToken_take_text(MeinToken*            me, 
                                                const QUEX_TYPE_LEXATOM* Begin, 
                                                const QUEX_TYPE_LEXATOM* End);
#endif

#ifdef QUEX_OPTION_TOKEN_REPETITION_SUPPORT
QUEX_INLINE size_t       MeinToken_repetition_n_get(MeinToken*);
QUEX_INLINE void         MeinToken_repetition_n_set(MeinToken*, size_t);
#endif /* QUEX_OPTION_TOKEN_REPETITION_SUPPORT */


class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG MeinToken {
public:
    MeinToken();
    MeinToken(const MeinToken& That);
    /* operator=(..): USE WITH CAUTION--POSSIBLE MAJOR PERFORMANCE DECREASE! 
     *                BETTER USE __copy(That)                                */
    MeinToken& operator=(const MeinToken& That);
    virtual ~MeinToken();


#   line 5 "a string"
    std::string      my_name;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   line 6 "a string"
    std::vector<int> numbers;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

    union {
        struct {

#   line 10 "a string"
            float            number;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   line 11 "a string"
            short            index;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

        } data_0;
        struct {

#   line 14 "a string"
            int16_t          x;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   line 15 "a string"
            int16_t          y;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

        } data_1;

#   line 17 "a string"
        uint32_t         stream_position;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>


#   line 18 "a string"
        uint16_t         who_is_that;
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

    } content;

public:

#   line 11 "a string"
    short            get_index() const                           { return content.data_0.index; }
#   line 11 "a string"
    void             set_index(short Value)                      { content.data_0.index = Value; }
#   line 5 "a string"
    std::string      get_my_name() const                         { return my_name; }
#   line 5 "a string"
    void             set_my_name(std::string& Value)             { my_name = Value; }
#   line 10 "a string"
    float            get_number() const                          { return content.data_0.number; }
#   line 10 "a string"
    void             set_number(float Value)                     { content.data_0.number = Value; }
#   line 6 "a string"
    std::vector<int> get_numbers() const                         { return numbers; }
#   line 6 "a string"
    void             set_numbers(std::vector<int>& Value)        { numbers = Value; }
#   line 18 "a string"
    uint16_t         get_who_is_that() const                     { return content.who_is_that; }
#   line 18 "a string"
    void             set_who_is_that(uint16_t Value)             { content.who_is_that = Value; }
#   line 17 "a string"
    uint32_t         get_stream_position() const                 { return content.stream_position; }
#   line 17 "a string"
    void             set_stream_position(uint32_t Value)         { content.stream_position = Value; }
#   line 15 "a string"
    int16_t          get_y() const                               { return content.data_1.y; }
#   line 15 "a string"
    void             set_y(int16_t Value)                        { content.data_1.y = Value; }
#   line 14 "a string"
    int16_t          get_x() const                               { return content.data_1.x; }
#   line 14 "a string"
    void             set_x(int16_t Value)                        { content.data_1.x = Value; }
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

    void set(const QUEX_TYPE_TOKEN_ID ID) { id = ID; }
    void set(const QUEX_TYPE_TOKEN_ID ID, const std::string& Value0, const std::vector<int>& Value1)
    { id = ID; my_name = Value0; numbers = Value1; }
    void set(const QUEX_TYPE_TOKEN_ID ID, const float& Value0, const short& Value1)
    { id = ID; content.data_0.number = Value0; content.data_0.index = Value1; }
    void set(const QUEX_TYPE_TOKEN_ID ID, const int16_t& Value0, const int16_t& Value1)
    { id = ID; content.data_1.x = Value0; content.data_1.y = Value1; }
    void set(const QUEX_TYPE_TOKEN_ID ID, const uint32_t& Value0)
    { id = ID; content.stream_position = Value0; }
    void set(const QUEX_TYPE_TOKEN_ID ID, const uint16_t& Value0)
    { id = ID; content.who_is_that = Value0; }


    public:
        /* _line_n, _column_n, and id are public, so that the token policy 
         * can access it. making it private would imply complications for 
         * user customized token classes. The token policies should be the
         * same for C and Cpp.                                               */
        QUEX_TYPE_TOKEN_ID    id;

#   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#       ifdef QUEX_OPTION_COUNTER_LINE
    public:
        QUEX_TYPE_TOKEN_LINE_N    _line_n;
        QUEX_TYPE_TOKEN_LINE_N    line_number() const                                 { return _line_n; }
        void                      set_line_number(const QUEX_TYPE_TOKEN_LINE_N Value) { _line_n = Value; }
#       endif
#       ifdef  QUEX_OPTION_COUNTER_COLUMN
    public:
        QUEX_TYPE_TOKEN_COLUMN_N  _column_n;
        QUEX_TYPE_TOKEN_COLUMN_N  column_number() const                                   { return _column_n; }
        void                      set_column_number(const QUEX_TYPE_TOKEN_COLUMN_N Value) { _column_n = Value; }
#       endif
#   endif
    public:
#   define self (*this)

#   undef  self

    private:
        friend void MeinToken_copy(MeinToken*       __this, 
                                         const MeinToken* That);
        friend bool MeinToken_take_text(MeinToken*             __this, 
                                              const QUEX_TYPE_LEXATOM*  Begin, 
                                              const QUEX_TYPE_LEXATOM*  End);
};

QUEX_NAMESPACE_TOKEN_CLOSE



extern QUEX_TYPE_LEXATOM QUEX_NAME(LexemeNull);

#endif /* QUEX_INCLUDE_GUARD__TOKEN__GENERATED__EUROPA__DEUTSCHLAND__BADEN_WUERTEMBERG__ISPRINGEN____MEINTOKEN */

/* This content is pasted into header, so the include guard is superfluous. 
 * It is left in place, so that if some time later the code generator is 
 * adapted to generate independent files, it will still work safely.          */
#ifndef QUEX_INCLUDE_GUARD__TOKEN__GENERATED__EUROPA__DEUTSCHLAND__BADEN_WUERTEMBERG__ISPRINGEN____MEINTOKEN_I
#define QUEX_INCLUDE_GUARD__TOKEN__GENERATED__EUROPA__DEUTSCHLAND__BADEN_WUERTEMBERG__ISPRINGEN____MEINTOKEN_I



QUEX_NAMESPACE_TOKEN_OPEN

QUEX_INLINE
MeinToken::MeinToken()
{
#   define self (*this)
#   define LexemeNull  (&QUEX_NAME(LexemeNull))

#   line 20 "a string"

       this = is = a = constructor;
   
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   undef  LexemeNull
#   undef  self
}

QUEX_INLINE
MeinToken::MeinToken(const MeinToken& Other)
{
   MeinToken_copy(this, &Other);
#   define self (*this)
#   define LexemeNull  (&QUEX_NAME(LexemeNull))

#   line 20 "a string"

       this = is = a = constructor;
   
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   undef  LexemeNull
#   undef  self
}

QUEX_INLINE
MeinToken::~MeinToken()
{
#   define self (*this)
#   define LexemeNull  (&QUEX_NAME(LexemeNull))

#   line 24 "a string"

       this = is = a = destructor;
   
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   undef  LexemeNull
#   undef  self
}

QUEX_INLINE MeinToken& 
MeinToken::operator=(const MeinToken& That) 
{ if( this != &That ) { MeinToken_copy(this, &That); } return *this; }

QUEX_INLINE void
MeinToken_construct(MeinToken* __this)
{
    /* Explicit constructor call by 'placement new' */
    new ((void*)__this) MeinToken;
}

QUEX_INLINE void
MeinToken_destruct(MeinToken* __this)
{
    if( ! __this ) return;
    __this->MeinToken::~MeinToken();  
}

QUEX_INLINE void
MeinToken_copy(MeinToken* __this, const MeinToken* __That)
{
#   define self  (*__this)
#   define Other (*__That)
#   define LexemeNull  (&QUEX_NAME(LexemeNull))
    (void)__this;
    (void)__That;

#   line 30 "a string"

       this = is = a = copy-code;
   
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   undef LexemeNull
#   undef Other
#   undef self
   /* If the user even misses to copy the token id, then there's
    * something seriously wrong.                                 */
   __quex_assert(__this->id == __That->id);
#ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#   ifdef QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
    __QUEX_IF_COUNT_LINES(__quex_assert(__this->_line_n == __That->_line_n));
    __QUEX_IF_COUNT_COLUMNS(__quex_assert(__this->_column_n == __That->_column_n));
#   endif
#endif
}

#ifdef QUEX_OPTION_TOKEN_TAKE_TEXT_SUPPORT
QUEX_INLINE bool 
MeinToken_take_text(MeinToken*              __this, 
                          const QUEX_TYPE_LEXATOM* Begin, 
                          const QUEX_TYPE_LEXATOM* End)
/* RETURNS: true -- if the token claims ownership over the given memory.
 *          false -- if no ownership is claimed.                             */
{
#   define self      (*__this)
#   define LexemeNull  (&QUEX_NAME(LexemeNull))
    (void)__this;

#   line 27 "a string"

       return true;
   
<<<<LINE_PRAGMA_WITH_CURRENT_LINE_N_AND_FILE_NAME>>>>

#   undef  LexemeNull
#   undef  self
    /* Default: no ownership.                                                */
    return false;
}
#endif

#ifdef QUEX_OPTION_TOKEN_REPETITION_SUPPORT
QUEX_INLINE size_t 
MeinToken_repetition_n_get(MeinToken* __this)
{
#   define self (*__this)
    (void)__this;

#   undef self
}

QUEX_INLINE void 
MeinToken_repetition_n_set(MeinToken* __this, size_t N)
{
#   define self (*__this)
    (void)__this; (void)N;

#   undef  self
}
#endif /* QUEX_OPTION_TOKEN_REPETITION_SUPPORT */

QUEX_NAMESPACE_TOKEN_CLOSE

#endif /* QUEX_INCLUDE_GUARD__TOKEN__GENERATED__EUROPA__DEUTSCHLAND__BADEN_WUERTEMBERG__ISPRINGEN____MEINTOKEN_I */

