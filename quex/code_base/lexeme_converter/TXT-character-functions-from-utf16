QUEX_INLINE void
QUEX_NAME(lexeme_to_utf8_character)(const QUEX_TYPE_LEXATOM** input_pp, 
                                    uint8_t**                 output_pp)
{
    uint32_t  x0      = (uint16_t)0;
    uint32_t  x1      = (uint16_t)0;
    uint32_t  unicode = (uint32_t)0;

    if ( **input_pp <= (uint16_t)0x7f ) {
        *((*output_pp)++) = (uint8_t)*(*input_pp);
        ++(*input_pp);

    } else if ( (uint16_t)0x7ff - (uint16_t)**input_pp >= 0 ) {
        *((*output_pp)++) = (uint8_t)(0xC0 | (*(*input_pp) >> 6)); 
        *((*output_pp)++) = (uint8_t)(0x80 | (*(*input_pp) & (uint16_t)0x3F));
        ++(*input_pp);

    } else if ( (uint16_t)0xD800 - (uint16_t)**input_pp > 0 ) { 
        *((*output_pp)++) = (uint8_t)(0xE0 |  *(*input_pp)                    >> 12);
        *((*output_pp)++) = (uint8_t)(0x80 | (*(*input_pp) & (uint16_t)0xFFF) >> 6);
        *((*output_pp)++) = (uint8_t)(0x80 | (*(*input_pp) & (uint16_t)0x3F));
        ++(*input_pp);

    } else if ( (uint16_t)0xE000 - (uint16_t)**input_pp > 0 ) { 
        /* Characters > 0xFFFF need to be coded in two bytes by means of 
         * surrogates.                                                        */
        x0 = (uint32_t)(*(*input_pp)++ - (QUEX_TYPE_LEXATOM)0xD800);
        x1 = (uint32_t)(*(*input_pp)++ - (QUEX_TYPE_LEXATOM)0xDC00);
        unicode = (x0 << 10) + x1 + 0x10000;

        /* Assume that only character appear, that are defined in unicode.    */
        __quex_assert(unicode <= (uint32_t)0x1FFFFF);

        *((*output_pp)++) = (uint8_t)(0xF0 | unicode                       >> 18);
        *((*output_pp)++) = (uint8_t)(0x80 | (unicode & (uint32_t)0x3FFFF) >> 12);
        *((*output_pp)++) = (uint8_t)(0x80 | (unicode & (uint32_t)0xFFF)   >> 6);
        *((*output_pp)++) = (uint8_t)(0x80 | (unicode & (uint32_t)0x3F));

    } else { 
        /* Always true: **input_pp <= 0xFFFF */
        *((*output_pp)++) = (uint8_t)(0xE0 |  *(*input_pp)                    >> 12);
        *((*output_pp)++) = (uint8_t)(0x80 | (*(*input_pp) & (uint16_t)0xFFF) >> 6);
        *((*output_pp)++) = (uint8_t)(0x80 | (*(*input_pp) & (uint16_t)0x3F));
        ++(*input_pp);
    } 
}

QUEX_INLINE void
QUEX_NAME(lexeme_to_utf16_character)(const QUEX_TYPE_LEXATOM**  input_pp, 
                                     uint16_t**                 output_pp)
{
    if(    (uint16_t)0xD800 - (uint16_t)**input_pp > 0 
        || (uint16_t)0xE000 - (uint16_t)**input_pp <= 0 ) {
        *((*output_pp)++) = (uint16_t)*(*input_pp)++;
    } else { 
        *((*output_pp)++) = (uint16_t)*(*input_pp)++;
        *((*output_pp)++) = (uint16_t)*(*input_pp)++;
    }
}

QUEX_INLINE void
QUEX_NAME(lexeme_to_utf32_character)(const QUEX_TYPE_LEXATOM**  input_pp, 
                                     uint32_t**                 output_pp)
{
    uint32_t  x0 = (uint32_t)0;
    uint32_t  x1 = (uint32_t)0;

    if(    (uint16_t)0xD800 - (uint16_t)**input_pp > 0 
        || (uint16_t)0xE000 - (uint16_t)**input_pp <= 0 ) {
        *((*output_pp)++) = (uint32_t)*(*input_pp)++;
    } else { 
        x0 = (uint32_t)(*(*input_pp)++) - (uint32_t)0xD800;
        x1 = (uint32_t)(*(*input_pp)++) - (uint32_t)0xDC00;
        *((*output_pp)++) = (uint32_t)((x0 << 10) + x1 + (uint32_t)0x10000);
    }
}
