/* vim: set syntax=cpp: */
#ifndef QUEX_INCLUDE_GUARD__ASSERTS
#define QUEX_INCLUDE_GUARD__ASSERTS

#if    ! defined(QUEX_INDICATE_CONFIGURATION_FILE_PASSED) \
    && ! defined(QUEX_OPTION_ASSERTS_EXT)
#   error "Asserts included before configuration file. However, configuration file CONTROLS asserts!"
#endif

#ifdef QUEX_OPTION_ASSERTS_EXT
$$<Cpp>--------------------------------------------------------------------------
#   include <cassert>
$$-----------------------------------------------------------------------------
$$<C>--------------------------------------------------------------------------
#   include <assert.h>
$$-----------------------------------------------------------------------------
#   define  __quex_assert(X)              assert(X)
#   ifndef  __quex_assert_no_passage
#   define  __quex_assert_no_passage()    do { QUEX_NAME(MF_error_code_set_if_first)(&self, E_Error_DFA_DropIntoOtherState); return; } while ( 0 )
#   endif
#   define  __QUEX_IF_ASSERTS(EXPRESSION) EXPRESSION
#   define  QUEX_IF_ASSERTS_poison(BEGIN, END) \
            do { \
                if( END > BEGIN )  \
                __QUEX_STD_memset((uint8_t*)(BEGIN), (uint8_t)0xFF, \
                                  (size_t)((const uint8_t*)END - (const uint8_t*)BEGIN)); \
            } while(0)
#else
#   define  __quex_assert(X)              /* no assert */
#   define  __quex_assert_no_passage()    /* no assert */
#   define  __QUEX_IF_ASSERTS(EXPRESSION) /* empty */
#   define  QUEX_IF_ASSERTS_poison(BEGIN, END) /* empty */
#endif

#define __QUEX_INCLUDE_INDICATOR__ASSERTS

#endif /* QUEX_INCLUDE_GUARD__ASSERTS */

