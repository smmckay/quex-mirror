/* -*- C++ -*-   vim: set syntax=cpp:
* CONTENT:
*
* (1) Includes for required standard headers.
* (2) Definitions of options and settings for the particular application.
* (3) #include "test_environment/lib/definitions"
* (4) Lexical FSM class TestAnalyzer and its memento class.
* (5) Constructor and init core of TestAnalyzer.
* (6) Memento pack and unpack functions.
*
* File content generated by Quex 0.68.2.
*
* (C) 2005-2012 Frank-Rene Schaefer
* ABSOLUTELY NO WARRANTY                                                      */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED______TESTANALYZER
#define __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED______TESTANALYZER

#ifdef      __QUEX_INCLUDE_INDICATOR__ANALYZER__MAIN
/* In case that multiple lexical analyzers are used the same header
* files are compiled with a different setting of the macros. The
* undef of the include guards happens in the following file.              */
#   ifdef   __QUEX_SIGNAL_DEFINED_LEXER_IN_NAMESPACE___
#      error "More than one lexical analyzer have been generated in the same name space. Read documentation on command line option '-o'."
#   endif
#   ifndef  QUEX_OPTION_MULTI
#      error "Multiple lexical analyzers detected. QUEX_OPTION_MULTI must be defined and 'quex/code_base/multi.i' must be included in one single file!"
#   endif
#include "test_environment/lib/include-guard-undef"
#   undef   __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION______TESTANALYZER
#else
#   define  __QUEX_INCLUDE_INDICATOR__ANALYZER__MAIN
#endif
#define     __QUEX_SIGNAL_DEFINED_LEXER_IN_NAMESPACE___

#include <cstddef>
#include "test_environment/lib/quex/compatibility/stdint.h"
#include "test_environment/TestAnalyzer-configuration"

#include "test_environment/lib/definitions"


struct TestAnalyzer_Engine_tag;
struct TestAnalyzer_Memento_tag;

class  TestAnalyzer;    /* TestAnalyzer */
typedef void  (*TestAnalyzer_AnalyzerFunctionP)(::TestAnalyzer*);


/* Token Class Declaration must preceed the user's header, so that the user
* can refer to it at ease.                                                    */

class TestAnalyzer_Token;


/* START: User defined header content ___________________________________________
*        Must come before token class definition, since the token class
*        might rely on contents of the header.                                */

extern bool UserConstructor_UnitTest_return_value;
extern bool UserReset_UnitTest_return_value;
extern bool UserMementoPack_UnitTest_return_value;


/* END: _______________________________________________________________________*/

#include "test_environment/lib/declarations"

#include "test_environment/TestAnalyzer-token_ids"
#include "test_environment/TestAnalyzer-token"



extern TestAnalyzer_Mode  TestAnalyzer_M;
extern TestAnalyzer_Mode  TestAnalyzer_M2;


extern  void TestAnalyzer_M_analyzer_function(::TestAnalyzer* me);
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
extern  bool TestAnalyzer_M_has_base(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
extern  bool TestAnalyzer_M_has_entry_from(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
extern  bool TestAnalyzer_M_has_exit_to(const TestAnalyzer_Mode* mode);
#endif
extern  void TestAnalyzer_M_on_buffer_before_change(void* aux);
extern  void TestAnalyzer_M_on_buffer_overflow(void* aux);
extern  void TestAnalyzer_M_on_entry(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
extern  void TestAnalyzer_M_on_exit(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
#ifdef QUEX_OPTION_INDENTATION_TRIGGER
extern  void TestAnalyzer_M_on_indentation(::TestAnalyzer* me, TestAnalyzer_indentation_t Indentation, TestAnalyzer_lexatom_t* Lexeme);
#endif
extern  void TestAnalyzer_M2_analyzer_function(::TestAnalyzer* me);
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
extern  bool TestAnalyzer_M2_has_base(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
extern  bool TestAnalyzer_M2_has_entry_from(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
extern  bool TestAnalyzer_M2_has_exit_to(const TestAnalyzer_Mode* mode);
#endif
extern  void TestAnalyzer_M2_on_buffer_before_change(void* aux);
extern  void TestAnalyzer_M2_on_buffer_overflow(void* aux);
extern  void TestAnalyzer_M2_on_entry(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
extern  void TestAnalyzer_M2_on_exit(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
#ifdef QUEX_OPTION_INDENTATION_TRIGGER
extern  void TestAnalyzer_M2_on_indentation(::TestAnalyzer* me, TestAnalyzer_indentation_t Indentation, TestAnalyzer_lexatom_t* Lexeme);
#endif


typedef bool (*TestAnalyzer_callback_on_token_type)(::TestAnalyzer_Token*);

typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG TestAnalyzer_Memento_tag {
/* __( Data Members )_______________________________________________________
*                                                                        */
char*                           __input_name;
TestAnalyzer_Buffer               buffer;

const struct TestAnalyzer_Mode_tag* __current_mode_p;
TestAnalyzer_AnalyzerFunctionP    current_analyzer_function;
#   if defined(QUEX_OPTION_ASSERTS)
TestAnalyzer_AnalyzerFunctionP    DEBUG_analyzer_function_at_entry;
#   endif
#   if defined(QUEX_OPTION_COUNTER)
TestAnalyzer_Counter              counter;
#   endif
#   ifdef QUEX_OPTION_INDENTATION_TRIGGER
bool                            _indentation_handler_active_f;
#   endif
struct TestAnalyzer_Memento_tag*  _parent_memento;
/* __( END: Data Members )________________________________________________*/

TestAnalyzer_Memento_tag()  {} /* Con- and Destruction necessary to trigger */
~TestAnalyzer_Memento_tag() {} /* con- and destruction of user members.     */

/* START: User's memento extentions __________________________________________*/

/* END: ______________________________________________________________________*/
} TestAnalyzer_Memento;

class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG TestAnalyzer {
public:
/* __( Data Members )_______________________________________________________
*                                                                        */
TestAnalyzer_Buffer               buffer;
TestAnalyzer_TokenQueue           _token_queue;
TestAnalyzer_ModeStack            _mode_stack;

E_Error                         error_code;
char*                           __input_name;

const TestAnalyzer_Mode*          __current_mode_p;
/* Shortcut to current mode's analyzer function.                          */
TestAnalyzer_AnalyzerFunctionP    current_analyzer_function;
#   if defined(QUEX_OPTION_ASSERTS)
/* Backup of analyzer's function pointer => mode change detection.        */
TestAnalyzer_AnalyzerFunctionP    DEBUG_analyzer_function_at_entry;
#   endif
#   if defined(QUEX_OPTION_COUNTER)
TestAnalyzer_Counter              counter;
#   endif
#   ifdef QUEX_OPTION_INDENTATION_TRIGGER
bool                            _indentation_handler_active_f;
#   endif
struct TestAnalyzer_Memento_tag*  _parent_memento;

public:
typedef ::TestAnalyzer_Token      token_type;
typedef TestAnalyzer_token_id_t   token_id_type;
typedef TestAnalyzer_lexatom_t    char_type;

/*__( Constructors )________________________________________________________
*                                                                        */
TestAnalyzer()
{ TestAnalyzer_MF_resources_absent_mark(this); error_code = E_Error_Uninitialized; }

TestAnalyzer(const char*      Filename,
TestAnalyzer_Converter* Converter = 0)
{ TestAnalyzer_from_file_name(this, Filename, Converter); }

TestAnalyzer(TestAnalyzer_ByteLoader*  byte_loader,
TestAnalyzer_Converter*        Converter = 0)
{ TestAnalyzer_from_ByteLoader(this, byte_loader, Converter); }

TestAnalyzer(TestAnalyzer_lexatom_t* BufferMemoryBegin,
size_t                  BufferMemorySize,
TestAnalyzer_lexatom_t*      BufferEndOfContentP = 0x0)
{ TestAnalyzer_from_memory(this, BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

/* Named placement-new functions.                                         */
static TestAnalyzer* from_file_name(const char*           Filename,
TestAnalyzer_Converter* Converter = 0)
{ return new TestAnalyzer(Filename, Converter); }

static TestAnalyzer* from_ByteLoader(TestAnalyzer_ByteLoader*  byte_loader,
TestAnalyzer_Converter*   Converter = 0)
{ return new TestAnalyzer(byte_loader, Converter); }

static TestAnalyzer* from_memory(TestAnalyzer_lexatom_t* BufferMemoryBegin,
size_t             BufferMemorySize,
TestAnalyzer_lexatom_t* BufferEndOfContentP = 0x0)
{ return new TestAnalyzer(BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

virtual ~TestAnalyzer()
{ TestAnalyzer_destruct(this); }
public:
/*__( Reset )_______________________________________________________________
*                                                                        */
bool reset() { return TestAnalyzer_MF_reset(this); }
bool reset_file_name(const char* FileName, TestAnalyzer_Converter* Converter = 0) { return TestAnalyzer_MF_reset_file_name(this, FileName, Converter); }
bool reset_ByteLoader(TestAnalyzer_ByteLoader* byte_loader, TestAnalyzer_Converter* Converter = 0) { return TestAnalyzer_MF_reset_ByteLoader(this, byte_loader, Converter); }
bool reset_memory(TestAnalyzer_lexatom_t* BufferMemoryBegin, size_t BufferMemorySize, TestAnalyzer_lexatom_t* BufferEndOfContentP) { return TestAnalyzer_MF_reset_memory(this, BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

/*__( Include From and To Substream )_______________________________________
*                                                                        */
bool include_push_file_name(const char* FileName, TestAnalyzer_Converter* Converter = 0) { return TestAnalyzer_MF_include_push_file_name(this, FileName, Converter); }
bool include_push_ByteLoader(const char* InputName, TestAnalyzer_ByteLoader* byte_loader, TestAnalyzer_Converter* Converter) { return TestAnalyzer_MF_include_push_ByteLoader(this, InputName, byte_loader, Converter); }
bool include_push_memory(const char* InputName, TestAnalyzer_lexatom_t* BufferMemoryBegin, size_t BufferMemorySize, TestAnalyzer_lexatom_t* BufferEndOfContentP) { return TestAnalyzer_MF_include_push_memory(this, InputName, BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }
bool include_pop() { return TestAnalyzer_MF_include_pop(this); }
void include_stack_delete() { TestAnalyzer_MF_include_stack_delete(this); }
bool include_detect_recursion(const char* InputName) { return TestAnalyzer_MF_include_detect_recursion(this, InputName); }

/*__( Receiving Tokens -- from outside lexer )_____________________________
*                                                                       */
bool run(TestAnalyzer_callback_on_token_type on_token, bool ErrorPrintF) { return TestAnalyzer_MF_run(this, on_token, ErrorPrintF); }
void receive(::TestAnalyzer_Token** token_pp) { TestAnalyzer_MF_receive(this, token_pp); }

/*__( Sending Tokens -- from inside lexer )________________________________
*                                                                       */
::TestAnalyzer_Token* token_p() { return TestAnalyzer_MF_token_p(this); }

void send(TestAnalyzer_token_id_t Id) { TestAnalyzer_MF_send(this, Id); }
void send_n(TestAnalyzer_token_id_t Id, size_t RepetitionN) { TestAnalyzer_MF_send_n(this, Id, RepetitionN); }
bool send_text(TestAnalyzer_token_id_t Id, TestAnalyzer_lexatom_t* BeginP, TestAnalyzer_lexatom_t* EndP) { return TestAnalyzer_MF_send_text(this, Id, BeginP, EndP); }
bool send_string(TestAnalyzer_token_id_t Id, TestAnalyzer_lexatom_t* ZeroTerminatedString) { return TestAnalyzer_MF_send_string(this, Id, ZeroTerminatedString); }

/*__( Mode Handling )______________________________________________________
*                                                                       */
const TestAnalyzer_Mode* mode() { return TestAnalyzer_MF_mode(this); }
void set_mode_brutally(const TestAnalyzer_Mode* Mode) { TestAnalyzer_MF_set_mode_brutally(this, Mode); }
void enter_mode(const TestAnalyzer_Mode* TargetMode) { TestAnalyzer_MF_enter_mode(this, TargetMode); }

void pop_mode() { TestAnalyzer_MF_pop_mode(this); }
void pop_drop_mode() { TestAnalyzer_MF_pop_drop_mode(this); }
void push_mode(TestAnalyzer_Mode* new_mode) { TestAnalyzer_MF_push_mode(this, new_mode); }

/*__( Line/Column Counter )________________________________________________
*                                                                       */
size_t line_number() { return TestAnalyzer_MF_line_number(this); }
size_t line_number_at_begin() { return TestAnalyzer_MF_line_number_at_begin(this); }
size_t line_number_at_end() { return TestAnalyzer_MF_line_number_at_end(this); }
void line_number_set(size_t Y) { TestAnalyzer_MF_line_number_set(this, Y); }

size_t column_number() { return TestAnalyzer_MF_column_number(this); }
size_t column_number_at_begin() { return TestAnalyzer_MF_column_number_at_begin(this); }
size_t column_number_at_end() { return TestAnalyzer_MF_column_number_at_end(this); }
void column_number_set(size_t X) { TestAnalyzer_MF_column_number_set(this, X); }

/*__( Indentation )________________________________________________________
*                                                                       */


public:
/*__( General Information )________________________________________________
*                                                                       */
const char* version() { return TestAnalyzer_MF_version(this); }
void print_this() { TestAnalyzer_MF_print_this(this); }
const char* input_name() { return TestAnalyzer_MF_input_name(this); }
bool input_name_set(const char* InputName) { return TestAnalyzer_MF_input_name_set(this, InputName); }

/*__( Navigation: Tell/Seek )______________________________________________
*                                                                       */
size_t tell() { return TestAnalyzer_MF_tell(this); }
void seek(const size_t CharacterIndex) { TestAnalyzer_MF_seek(this, CharacterIndex); }
void seek_forward(const size_t CharacterN) { TestAnalyzer_MF_seek_forward(this, CharacterN); }
void seek_backward(const size_t CharacterN) { TestAnalyzer_MF_seek_backward(this, CharacterN); }

void undo() { TestAnalyzer_MF_undo(this); }
void undo_n(size_t DeltaN_Backward) { TestAnalyzer_MF_undo_n(this, DeltaN_Backward); }

/*__( Byte Order Reversion Activation / Deactivation )_____________________
*                                                                       */
bool byte_order_reversion() { return TestAnalyzer_MF_byte_order_reversion(this); }
void byte_order_reversion_set(bool Value) { TestAnalyzer_MF_byte_order_reversion_set(this, Value); }

/*__( Error Codes )________________________________________________________
*                                                                       */
void error_code_clear() { TestAnalyzer_MF_error_code_clear(this); }
bool error_code_is_void() { return TestAnalyzer_MF_error_code_is_void(this); }
void error_code_set_void() { TestAnalyzer_MF_error_code_set_void(this); }
void error_code_set_if_first(E_Error ErrorCode) { TestAnalyzer_MF_error_code_set_if_first(this, ErrorCode); }

/*__( Deep Resources )_____________________________________________________
*                                                                       */
void collect_user_memory(TestAnalyzer_lexatom_t** user_memory_p) { TestAnalyzer_MF_collect_user_memory(this, user_memory_p); }
void resources_absent_mark() { TestAnalyzer_MF_resources_absent_mark(this); }
bool resources_absent() { return TestAnalyzer_MF_resources_absent(this); }

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
/* START: User's class body extensions _______________________________________*/

/* END: ______________________________________________________________________*/
#undef  self

public:
/* Befriend all modes                                                     */
friend  void TestAnalyzer_M_analyzer_function(::TestAnalyzer* me);
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
friend  bool TestAnalyzer_M_has_base(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
friend  bool TestAnalyzer_M_has_entry_from(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
friend  bool TestAnalyzer_M_has_exit_to(const TestAnalyzer_Mode* mode);
#endif
friend  void TestAnalyzer_M_on_buffer_before_change(void* aux);
friend  void TestAnalyzer_M_on_buffer_overflow(void* aux);
friend  void TestAnalyzer_M_on_entry(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
friend  void TestAnalyzer_M_on_exit(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
#ifdef QUEX_OPTION_INDENTATION_TRIGGER
friend  void TestAnalyzer_M_on_indentation(::TestAnalyzer* me, TestAnalyzer_indentation_t Indentation, TestAnalyzer_lexatom_t* Lexeme);
#endif
friend  void TestAnalyzer_M2_analyzer_function(::TestAnalyzer* me);
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
friend  bool TestAnalyzer_M2_has_base(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
friend  bool TestAnalyzer_M2_has_entry_from(const TestAnalyzer_Mode* mode);
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
friend  bool TestAnalyzer_M2_has_exit_to(const TestAnalyzer_Mode* mode);
#endif
friend  void TestAnalyzer_M2_on_buffer_before_change(void* aux);
friend  void TestAnalyzer_M2_on_buffer_overflow(void* aux);
friend  void TestAnalyzer_M2_on_entry(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
friend  void TestAnalyzer_M2_on_exit(::TestAnalyzer* me, const TestAnalyzer_Mode* mode);
#ifdef QUEX_OPTION_INDENTATION_TRIGGER
friend  void TestAnalyzer_M2_on_indentation(::TestAnalyzer* me, TestAnalyzer_indentation_t Indentation, TestAnalyzer_lexatom_t* Lexeme);
#endif

private:
TestAnalyzer(const TestAnalyzer&);                   /* Forbidden */
TestAnalyzer& operator=(const TestAnalyzer& Other); /* Forbidden */

};





#include "test_environment/lib/implementations-inline.i"

/* START: User defined header content _________________________________________
*        The 'footer' content relies on class definitions made above.        */



#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED______TESTANALYZER */
#ifndef QUEX_OPTION_UNIT_TEST_NO_IMPLEMENTATION_IN_HEADER



#if defined(__QUEX_OPTION_PLAIN_C)
QUEX_INLINE void
TestAnalyzer_member_functions_assign(::TestAnalyzer* me)
{

}
#endif

bool
TestAnalyzer_user_constructor(::TestAnalyzer* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's constructor extensions _______________________________________*/
return UserConstructor_UnitTest_return_value;
/* END: _______________________________________________________________________*/
#undef self
    return true;
}

void
TestAnalyzer_user_destructor(::TestAnalyzer* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's constructor extensions _______________________________________*/

/* END: _______________________________________________________________________*/
#undef self
}

bool
TestAnalyzer_user_reset(::TestAnalyzer* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's 'reset' ______________________________________________________*/
return UserReset_UnitTest_return_value;
/* END: _______________________________________________________________________*/
#undef self
    return true;
}

void
TestAnalyzer_user_print(::TestAnalyzer* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's constructor extensions _______________________________________*/

/* END: _______________________________________________________________________*/
#undef self
}

bool
TestAnalyzer_user_memento_pack(::TestAnalyzer* me, 
                             const char*         InputName, 
                             TestAnalyzer_Memento* memento) 
{
    (void)me; (void)memento; (void)InputName;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's memento 'pack' _______________________________________________*/
return UserMementoPack_UnitTest_return_value;
/* END: _______________________________________________________________________*/
#undef self
    return true;
}

void
TestAnalyzer_user_memento_unpack(::TestAnalyzer*  me, 
                               TestAnalyzer_Memento*  memento)
{
    (void)me; (void)memento;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's memento 'unpack' _____________________________________________*/

/* END: _______________________________________________________________________*/
#undef self
}






bool UserConstructor_UnitTest_return_value = true;
bool UserReset_UnitTest_return_value       = true;
bool UserMementoPack_UnitTest_return_value = true;
#endif /* QUEX_OPTION_UNIT_TEST_NO_IMPLEMENTATION_IN_HEADER */

#ifndef QUEX_OPTION_UNIT_TEST_NO_IMPLEMENTATION_IN_HEADER
#include "test_environment/TestAnalyzer-token"

#endif /* QUEX_OPTION_UNIT_TEST_NO_IMPLEMENTATION_IN_HEADER */
