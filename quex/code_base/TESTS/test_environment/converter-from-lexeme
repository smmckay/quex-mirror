/* vim: set filetype=cpp:  -*- C++ -*-
*
* Declaration of all converter functions towards 'utf8', 'utf16', 'utf32',
* 'char', and 'wchar_t':
*
* (C) 2018 Frank-Rene Schaefer.
*     ABSOLUTELY NO WARRANTY                                                */
#ifndef __QUEX_INCLUDE_GUARD__TESTANALYZER_UNICODE_UINT8_T
#define __QUEX_INCLUDE_GUARD__TESTANALYZER_UNICODE_UINT8_T



inline void
TestAnalyzer_lexeme_to_utf8_character(const TestAnalyzer_lexatom_t** input_pp,
uint8_t**                 output_pp);
inline void
TestAnalyzer_lexeme_to_utf16_character(const TestAnalyzer_lexatom_t**  input_pp,
uint16_t**                 output_pp);
inline void
TestAnalyzer_lexeme_to_utf32_character(const TestAnalyzer_lexatom_t**  input_pp,
uint32_t**                 output_pp);
inline void
TestAnalyzer_lexeme_to_char_character(const TestAnalyzer_lexatom_t**  input_pp,
char**                     output_pp);
inline void
TestAnalyzer_lexeme_to_pretty_char_character(const TestAnalyzer_lexatom_t**  input_pp,
char**                     output_pp);
#if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
inline void
TestAnalyzer_lexeme_to_wchar_t_character(const TestAnalyzer_lexatom_t**  input_pp,
wchar_t**                 output_pp);
#endif

/* (2) String converters */
inline void
TestAnalyzer_lexeme_nnzt_to_utf8(const TestAnalyzer_lexatom_t**  source_pp,
const TestAnalyzer_lexatom_t*   SourceEnd,
uint8_t**                 drain_pp,
const uint8_t*            DrainEnd);
inline void
TestAnalyzer_lexeme_nnzt_to_utf16(const TestAnalyzer_lexatom_t**  source_pp,
const TestAnalyzer_lexatom_t*   SourceEnd,
uint16_t**                drain_pp,
const uint16_t*           DrainEnd);
inline void
TestAnalyzer_lexeme_nnzt_to_utf32(const TestAnalyzer_lexatom_t**  source_pp,
const TestAnalyzer_lexatom_t*   SourceEnd,
uint32_t**                drain_pp,
const uint32_t*           DrainEnd);
inline void
TestAnalyzer_lexeme_nnzt_to_char(const TestAnalyzer_lexatom_t**  source_pp,
const TestAnalyzer_lexatom_t*   SourceEnd,
char**                    drain_pp,
const char*               DrainEnd);
inline void
TestAnalyzer_lexeme_nnzt_to_pretty_char(const TestAnalyzer_lexatom_t**  source_pp,
const TestAnalyzer_lexatom_t*   SourceEnd,
char**                     drain_pp,
const char*                DrainEnd);

#if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
inline void
TestAnalyzer_lexeme_nnzt_to_wchar(const TestAnalyzer_lexatom_t**  source_pp,
const TestAnalyzer_lexatom_t*   SourceEnd,
wchar_t**                  drain_pp,
const wchar_t*             DrainEnd);
#endif

/* (2) String converters */
inline uint8_t*
TestAnalyzer_lexeme_to_utf8(const TestAnalyzer_lexatom_t*  SourceBegin,
uint8_t*                  drain_p,
const uint8_t*            DrainEnd);
inline uint16_t*
TestAnalyzer_lexeme_to_utf16(const TestAnalyzer_lexatom_t*  SourceBegin,
uint16_t*                 drain_p,
const uint16_t*           DrainEnd);
inline uint32_t*
TestAnalyzer_lexeme_to_utf32(const TestAnalyzer_lexatom_t*  SourceBegin,
uint32_t*                 drain_p,
const uint32_t*           DrainEnd);
inline char*
TestAnalyzer_lexeme_to_char(const TestAnalyzer_lexatom_t*  SourceBegin,
char*                     drain_p,
const char*               DrainEnd);
inline char*
TestAnalyzer_lexeme_to_pretty_char(const TestAnalyzer_lexatom_t* SourceBegin,
char*                    drain_p,
const char*              DrainEnd);

#if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
inline wchar_t*
TestAnalyzer_lexeme_to_wchar(const TestAnalyzer_lexatom_t* SourceBegin,
wchar_t*                 drain_p,
const wchar_t*           DrainEnd);
#endif

#if ! defined(__QUEX_OPTION_PLAIN_C)
inline std::basic_string<uint8_t>
TestAnalyzer_lexeme_to_utf8(const std::basic_string<TestAnalyzer_lexatom_t>& Source);
inline std::basic_string<uint16_t>
TestAnalyzer_lexeme_to_utf16(const std::basic_string<TestAnalyzer_lexatom_t>& Source);
inline std::basic_string<uint32_t>
TestAnalyzer_lexeme_to_utf32(const std::basic_string<TestAnalyzer_lexatom_t>& Source);
inline std::basic_string<char>
TestAnalyzer_lexeme_to_char(const std::basic_string<TestAnalyzer_lexatom_t>& Source);
inline std::basic_string<char>
TestAnalyzer_lexeme_to_pretty_char(const std::basic_string<TestAnalyzer_lexatom_t>& Source);
#   if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
inline std::basic_string<wchar_t>
TestAnalyzer_lexeme_to_wchar(const std::basic_string<TestAnalyzer_lexatom_t>& Source);
#   endif
#endif



#endif /* __QUEX_INCLUDE_GUARD__TESTANALYZER_UNICODE_UINT8_T */
