token_type {
   header {
#       include <iostream>
#       include <string>
   #include "test_cpp/converter-from-lexeme"

   }
   standard {
        id            : uint32_t;
        line_number   : size_t;
        column_number : size_t;
   }
   distinct {
       text   :  std::basic_string<char>;
       number :  size_t;
   }

   inheritable;

   copy {
        self.id    = Other.id;
        self.text   = Other.text;
        self.number = Other.number;
        self._line_n   = Other._line_n;
        self._column_n = Other._column_n;
   }

   body {
        typedef std::basic_string<QUEX_TYPE_LEXATOM> __string;

        operator 
        const std::string() const
        { return get_string(); }

        const std::string
        get_string() const 
        {
            std::string             tmp;

            /* tmp = QUEX_NAME(map_token_id_to_name)(self.id); */

            tmp += " '" + QUEX_NAME(lexeme_to_pretty_char)(self.text) + "'";

            return tmp;
        }
   }

   take_text {
        /* It cannot be assumed that the lexeme is zero terminated. */
       const char* B = (const char*)Begin;
        __quex_assert(End >= Begin);
        self.text.assign(B, (size_t)(End-Begin));

        printf("Lexical FSM Receives:\n");
        printf("   '%s'\n", Begin);
        return true;
   }

   repetition_set {
       self.number = N;
   }

   repetition_get {
       return self.number;
   }

   footer {
        inline std::ostream&
        operator<<(std::ostream& ostr, const $$TOKEN_CLASS$$& Tok)
        { ostr << Tok.get_string(); return ostr; }

   #include "test_cpp/converter-from-lexeme.i"
   }
}

token { 
    X; /* Must be consistent with the TestAnalyzer's 'nothing.qx' */
}
