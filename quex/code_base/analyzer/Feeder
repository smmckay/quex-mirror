/* -*- C++ -*-   vim:set syntax=cpp:
 * 
 * PURPOSE: A 'feeder' coordinates the lexical analysis based on input that
 *          is *NOT* delivered through a byte loader in the background. 
 *
 * In cases where the user wishes to fill the lexical analyzer buffer manually,
 * caution has to be applied to avoid consuming invalid tokens and to setup
 * the stream appropriately. This coordination is safely implemented in the
 * small, but well thought-through function 'deliver' below. Examples of how
 * to use it can be found in the 'demo/010' directory.
 *
 * (C) 2016 Frank-Rene Schaefer.                                             */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__FEEDER
#define __QUEX_INCLUDE_GUARD__ANALYZER__FEEDER
#
#ifndef QUEX_TYPE_ANALYZER
#   error "This header must be included after the lexical analyzer definition."
#endif
#ifndef QUEX_TYPE_TOKEN
#   error "This header must be included after the token class definition."
#endif

QUEX_NAMESPACE_MAIN_OPEN

#define QUEX_TYPE_FEEDER      QUEX_NAME(Feeder) 
#define QUEX_TYPE_INFILTRATOR QUEX_NAME(Infiltrator) 

typedef struct {
    QUEX_TYPE_ANALYZER* lexer;
    QUEX_TYPE_LEXATOM*  last_incomplete_lexeme_p;
    QUEX_TYPE_TOKEN_ID  stream_terminating_token_id;
} QUEX_NAME(FeederBase);

#ifdef __QUEX_OPTION_PLAIN_
#   define QUEX_TYPE_FEEDER_TAG QUEX_NAME(Feeder_tag)
typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_TYPE_FEEDER_TAG {
#else
struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_TYPE_FEEDER {
#endif
    QUEX_NAME(FeederBase)  base;

    struct {
        const void* begin_p;
        const void* end_p;
    } external_chunk;

    QUEX_TYPE_TOKEN_ID  stream_terminating_token_id;

#ifndef __QUEX_OPTION_PLAIN_C
public:
    QUEX_TYPE_FEEDER(QUEX_TYPE_ANALYZER*, QUEX_TYPE_TOKEN_ID);
    void             feed(const void* BeginP, const void* EndP);
    QUEX_TYPE_TOKEN* deliver();
};
#else
    void             (*feed)(struct QUEX_TYPE_FEEDER_TAG*, 
                             const void* BeginP, const void* EndP);
    QUEX_TYPE_TOKEN* (*deliver)(struct QUEX_TYPE_FEEDER_TAG*);
};
} QUEX_TYPE_FEEDER;
#endif


QUEX_INLINE void             QUEX_NAME(Feeder_construct)(QUEX_TYPE_FEEDER*   me, 
                                                         QUEX_TYPE_ANALYZER* lexer,
                                                         QUEX_TYPE_TOKEN_ID  StreamTerminatingTokenId);
QUEX_INLINE QUEX_TYPE_TOKEN* QUEX_NAME(Feeder_deliver)(QUEX_TYPE_FEEDER* me);
QUEX_INLINE void             QUEX_NAME(Feeder_feed)(QUEX_TYPE_FEEDER* me,
                                                    const void* BeginP, 
                                                    const void* EndP);


#ifdef __QUEX_OPTION_PLAIN_
#   define QUEX_TYPE_INFILTRATOR_TAG QUEX_NAME(Feeder_tag)
typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_TYPE_INFILTRATOR_TAG {
#else
struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_TYPE_INFILTRATOR {
#endif

    QUEX_NAME(FeederBase)  base;

#ifndef __QUEX_OPTION_PLAIN_C
public:
    QUEX_TYPE_INFILTRATOR(QUEX_TYPE_ANALYZER*, QUEX_TYPE_TOKEN_ID);
    void              access(void**       begin_p, 
                             const void** end_p);
    bool              gavage(ptrdiff_t    ReceivedN);
    QUEX_TYPE_TOKEN*  deliver();
};
#else
    void              (*access)(QUEX_TYPE_INFILTRATOR* me,
                                void**       begin_p, 
                                const void** end_p);
    bool              (*gavage)(QUEX_TYPE_INFILTRATOR* me, 
                                ptrdiff_t              ReceivedN);
    QUEX_TYPE_TOKEN*  (*deliver)(QUEX_TYPE_INFILTRATOR* me);
} QUEX_TYPE_INFILTRATOR;
#endif

QUEX_INLINE void  QUEX_NAME(Infiltrator_construct)(QUEX_TYPE_INFILTRATOR* me, 
                                                   QUEX_TYPE_ANALYZER*    lexer,
                                                   QUEX_TYPE_TOKEN_ID     StreamTerminatingTokenId);
QUEX_INLINE void  QUEX_NAME(Infiltrator_access)(QUEX_TYPE_INFILTRATOR* me,
                                                void**                 begin_p, 
                                                const void**           end_p);
QUEX_INLINE bool  QUEX_NAME(Infiltrator_gavage)(QUEX_TYPE_INFILTRATOR* me, 
                                                ptrdiff_t              ReceivedN);
QUEX_INLINE QUEX_TYPE_TOKEN*  QUEX_NAME(Infiltrator_deliver)(QUEX_TYPE_INFILTRATOR* me);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__POSTCATEGORIZER */
