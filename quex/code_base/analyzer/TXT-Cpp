/* -*- C++ -*-   vim: set syntax=cpp:
 * CONTENT: 
 *
 * (1) Includes for required standard headers.
 * (2) Definitions of options and settings for the particular application.
 * (3) $$INC: definitions$$ for default settings.
 * (4) Lexical FSM class $$LEXER_CLASS_NAME$$ and its memento class.
 * (5) Constructor and init core of $$LEXER_CLASS_NAME$$.
 * (6) Memento pack and unpack functions.
 *
 * File content generated by Quex $$QUEX_VERSION$$.
 *
 * (C) 2005-2012 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                                      */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$
#define __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$

#ifdef      __QUEX_INCLUDE_INDICATOR__ANALYZER__MAIN
    /* In case that multiple lexical analyzers are used the same header
     * files are compiled with a different setting of the macros. The
     * undef of the include guards happens in the following file.              */
#   ifdef   __QUEX_SIGNAL_DEFINED_LEXER_IN_NAMESPACE_$$LEXER_NAME_SPACE_EXT$$
#      error "More than one lexical analyzer have been generated in the same name space. Read documentation on command line option '-o'."
#   endif
#   ifndef  QUEX_OPTION_MULTI
#      error "Multiple lexical analyzers detected. QUEX_OPTION_MULTI must be defined and 'quex/code_base/multi.i' must be included in one single file!"
#   endif
$$INC: include-guard-undef$$
#   undef   __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$
#else
#   define  __QUEX_INCLUDE_INDICATOR__ANALYZER__MAIN
#endif
#define     __QUEX_SIGNAL_DEFINED_LEXER_IN_NAMESPACE_$$LEXER_NAME_SPACE_EXT$$

#include "$$LEXER_CONFIG_FILE$$"

$$INC: definitions$$

QUEX_NAMESPACE_MAIN_OPEN 
    struct QUEX_NAME(Engine_tag);
    struct QUEX_NAME(Memento_tag);
    $$LEXER_DERIVED_CLASS_DECL$$
    class  QUEX_TYPE0_ANALYZER;    /* $$LEXER_CLASS_NAME$$ */
    typedef void  (*QUEX_NAME(AnalyzerFunctionP))(QUEX_TYPE_ANALYZER*);
QUEX_NAMESPACE_MAIN_CLOSE

/* Token Class Declaration must precede the user's header, so that the user
 * can refer to it at ease.                                                    */
QUEX_NAMESPACE_TOKEN_OPEN
    class  QUEX_TYPE0_TOKEN;
QUEX_NAMESPACE_TOKEN_CLOSE

/* START: User defined header content ___________________________________________
 *        Must come before token class definition, since the token class 
 *        might rely on contents of the header.                                */
$$USER_DEFINED_HEADER$$
/* END: _______________________________________________________________________*/

$$INC: analyzer/headers$$

#include "$$TOKEN_ID_DEFINITION_FILE$$"
#include "$$TOKEN_CLASS_DEFINITION_FILE$$"

QUEX_NAMESPACE_MAIN_OPEN 

$$MODE_OBJECTS$$

$$MODE_SPECIFIC_ANALYSER_FUNCTIONS$$

typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_NAME(Memento_tag) {
    /* __( Data Members )_______________________________________________________
     *                                                                        */
    char*                           __input_name;
    QUEX_NAME(Buffer)               buffer;

    const QUEX_NAME(Mode)*          __current_mode_p; 
    QUEX_NAME(AnalyzerFunctionP)    current_analyzer_function;
#   if defined(QUEX_OPTION_ASSERTS)
    QUEX_NAME(AnalyzerFunctionP)    DEBUG_analyzer_function_at_entry;
#   endif
#   if defined(QUEX_OPTION_COUNTER)
    QUEX_NAME(Counter)              counter;
#   endif
#   ifdef QUEX_OPTION_INDENTATION_TRIGGER
    bool                            _indentation_handler_active_f;
#   endif
#   if defined(QUEX_OPTION_INCLUDE_STACK)
    struct QUEX_NAME(Memento_tag)*  _parent_memento;
#   endif
    /* __( END: Data Members )________________________________________________*/

    QUEX_NAME(Memento_tag)()  {} /* Con- and Destruction necessary to trigger */
    ~QUEX_NAME(Memento_tag)() {} /* con- and destruction of user members.     */

/* START: User's memento extentions __________________________________________*/
$$MEMENTO_EXTENSIONS$$
/* END: ______________________________________________________________________*/
} QUEX_NAME(Memento);

class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG $$LEXER_CLASS_NAME$$ {
public:
    /* __( Data Members )_______________________________________________________
     *                                                                        */
    QUEX_NAME(Buffer)               buffer;
    QUEX_NAME(TokenQueue)           _token_queue;  
    QUEX_NAME(ModeStack)            _mode_stack;

    E_Error                         error_code;
    char*                           __input_name;

    const QUEX_NAME(Mode)*          __current_mode_p; 
    /* Shortcut to current mode's analyzer function.                          */
    QUEX_NAME(AnalyzerFunctionP)    current_analyzer_function;
#   if defined(QUEX_OPTION_ASSERTS)
    /* Backup of analyzer's function pointer => mode change detection.        */
    QUEX_NAME(AnalyzerFunctionP)    DEBUG_analyzer_function_at_entry;
#   endif
#   if defined(QUEX_OPTION_COUNTER)
    QUEX_NAME(Counter)              counter;
#   endif
#   ifdef QUEX_OPTION_INDENTATION_TRIGGER
    bool                            _indentation_handler_active_f;
#   endif
#   if defined(QUEX_OPTION_INCLUDE_STACK)
    struct QUEX_NAME(Memento_tag)*  _parent_memento;
#   endif
    /* __( END: Data Members )________________________________________________*/
private:
    $$LEXER_CLASS_NAME$$(const $$LEXER_CLASS_NAME$$&) {}
    void resources_absent_mark()
         { QUEX_NAME(resources_absent_mark)(this); }

public:
    typedef QUEX_TYPE_TOKEN      token_type;
    typedef QUEX_TYPE_TOKEN_ID   token_id_type;
    typedef QUEX_TYPE_LEXATOM    char_type;

    /*__( Constructors )________________________________________________________
     *                                                                        */
    $$LEXER_CLASS_NAME$$()
         { QUEX_NAME(resources_absent_mark)(this); error_code = E_Error_Uninitialized; }

    $$LEXER_CLASS_NAME$$(const char*      Filename, 
    $$___SPACE___$$ QUEX_NAME(Converter)* Converter = 0) 
         { QUEX_NAME(from_file_name)(this, Filename, Converter); }

    $$LEXER_CLASS_NAME$$(QUEX_NAME(ByteLoader)*  byte_loader, 
    $$___SPACE___$$ QUEX_NAME(Converter)*        Converter = 0) 
         { QUEX_NAME(from_ByteLoader)(this, byte_loader, Converter); }

    $$LEXER_CLASS_NAME$$(QUEX_TYPE_LEXATOM* BufferMemoryBegin, 
    $$___SPACE___$$ size_t                  BufferMemorySize,
    $$___SPACE___$$ QUEX_TYPE_LEXATOM*      BufferEndOfContentP = 0x0)
         { QUEX_NAME(from_memory)(this, BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

    /* Named placement-new functions.                                         */
    static $$LEXER_CLASS_NAME$$* from_file_name(const char*           Filename, 
    $$___SPACE___$$                             QUEX_NAME(Converter)* Converter = 0) 
         { return new $$LEXER_CLASS_NAME$$(Filename, Converter); }

    static $$LEXER_CLASS_NAME$$* from_ByteLoader(QUEX_NAME(ByteLoader)*  byte_loader, 
    $$___SPACE___$$                              QUEX_NAME(Converter)*   Converter = 0) 
         { return new $$LEXER_CLASS_NAME$$(byte_loader, Converter); }

    static $$LEXER_CLASS_NAME$$* from_memory(QUEX_TYPE_LEXATOM* BufferMemoryBegin, 
    $$___SPACE___$$                          size_t             BufferMemorySize,
    $$___SPACE___$$                          QUEX_TYPE_LEXATOM* BufferEndOfContentP = 0x0)
         { return new $$LEXER_CLASS_NAME$$(BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

    virtual ~$$LEXER_CLASS_NAME$$()
         { QUEX_NAME(destruct)(this); }

    /*__( Reset )_______________________________________________________________
     *                                                                        */
    bool reset()
         { return QUEX_NAME(reset)(this); }
    bool reset(const char*            FileName, 
               QUEX_NAME(Converter)*  Converter = 0)
         { return QUEX_NAME(reset_file_name)(this, FileName, Converter); }

    bool reset(QUEX_NAME(ByteLoader)*  byte_loader, 
               QUEX_NAME(Converter)*   Converter = 0)
         { return QUEX_NAME(reset_ByteLoader)(this, byte_loader, Converter); }

    bool reset(QUEX_TYPE_LEXATOM* BufferMemoryBegin, 
               size_t             BufferMemorySize,
               QUEX_TYPE_LEXATOM* BufferEndOfContentP)  
         { return QUEX_NAME(reset_memory)(this, BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

    void collect_user_memory(QUEX_TYPE_LEXATOM** user_memory_p)
         { return QUEX_NAME(collect_user_memory)(this, user_memory_p); }

    /*__( Include Handling )____________________________________________________
     *                                                                        */
#   ifdef QUEX_OPTION_INCLUDE_STACK
    bool include_push(const char*             FileName, 
                      QUEX_NAME(Converter)*   Converter = 0)
         { return QUEX_NAME(include_push_file_name)(this, FileName, Converter); }
    bool include_push(const char*             InputName, 
                      QUEX_NAME(ByteLoader)*  byte_loader, 
                      QUEX_NAME(Converter)*   Converter)  /* != 0 to avoid ambiguity. */
         { return QUEX_NAME(include_push_ByteLoader)(this, InputName, byte_loader, Converter); }
    bool include_push(const char*        InputName, 
                      QUEX_TYPE_LEXATOM* BufferMemoryBegin, 
                      size_t             BufferMemorySize,
                      QUEX_TYPE_LEXATOM* BufferEndOfContentP)  
         { return QUEX_NAME(include_push_memory)(this, InputName, BufferMemoryBegin, 
                                                 BufferMemorySize, BufferEndOfContentP); }
    bool include_pop()
         { return QUEX_NAME(include_pop)(this); }
    void include_stack_delete()
         { QUEX_NAME(include_stack_delete)(this); }
    bool include_detect_recursion(const char* InputName)
         { return QUEX_NAME(include_detect_recursion)(this, InputName); }
#   endif

    /*__( Analysis => Receiving Tokens )________________________________________
     *                                                                        */
    $$MF: void receive(QUEX_TYPE_TOKEN** token_pp)$$

    $$MF: QUEX_TYPE_TOKEN*  token_p()$$

    $$MF: void send(QUEX_TYPE_TOKEN_ID Id)$$
    $$MF: void send_n(QUEX_TYPE_TOKEN_ID Id, size_t RepetitionN)$$
    $$MF: bool send_text(QUEX_TYPE_TOKEN_ID Id, QUEX_TYPE_LEXATOM* BeginP, QUEX_TYPE_LEXATOM* EndP)$$
    $$MF: bool send_string(QUEX_TYPE_TOKEN_ID Id, QUEX_TYPE_LEXATOM* ZeroTerminatedString)$$

    /*__( Modes )_______________________________________________________________
     *                                                                        */
    $$MF: const QUEX_NAME_Mode_*  mode()$$
    $$MF: void                    set_mode_brutally(const QUEX_NAME_Mode_* Mode)$$
    $$MF: void                    enter_mode(const QUEX_NAME_Mode_* TargetMode)$$

    $$MF: void pop_mode()$$
    $$MF: void pop_drop_mode()$$
    $$MF: void push_mode(QUEX_NAME_Mode_* new_mode)$$

private:
    /* Befriend all modes                                                     */
$$MODE_CLASS_FRIENDS$$  

public:
    /*__( Access to Buffer )____________________________________________________
     *                                                                        */
    QUEX_TYPE_LEXATOM*    lexeme_start_pointer_get()  { return QUEX_NAME(lexeme_start_pointer_get)(this); }
    QUEX_TYPE_LEXATOM*    input_pointer_get()         { return QUEX_NAME(input_pointer_get)(this); }
    void                  input_pointer_set(QUEX_TYPE_LEXATOM* InputP) { return QUEX_NAME(input_pointer_set)(this, InputP); }

    /*__( Line/Column Counter )________________________________________________
     *                                                                       */
#   ifdef  QUEX_OPTION_COUNTER_LINE
    size_t      line_number() const            { return line_number_at_begin(); }
    size_t      line_number_at_begin() const   { return counter._line_number_at_begin; }
    size_t      line_number_at_end() const     { return counter._line_number_at_end; }
    /*          line_number_set(...) defines the column number of the next pattern match. */
    void        line_number_set(size_t Y)      { counter._line_number_at_end = Y; }
#   endif
#   ifdef  QUEX_OPTION_COUNTER_COLUMN
    size_t      column_number() const          { return column_number_at_begin(); }
    size_t      column_number_at_begin() const { return counter._column_number_at_begin; }
    size_t      column_number_at_end() const   { return counter._column_number_at_end; }
    /*          column_number_set(...) defines the column number of the next pattern match. */
    void        column_number_set(size_t X)    { counter._column_number_at_end = X; }
#   endif
    /*__( Indentation )________________________________________________________
     *                                                                       */
#   ifdef   QUEX_OPTION_INDENTATION_TRIGGER
    size_t      indentation()                  { return counter._indentation_stack.back - counter._indentation_stack.front + 1; }
#   endif

    /*__( Navigation: Tell/Seek )______________________________________________
     *                                                                       */
    $$MF: size_t  tell()$$
    $$MF: void    seek(const size_t CharacterIndex)$$
    $$MF: void    seek_forward(const size_t CharacterN)$$
    $$MF: void    seek_backward(const size_t CharacterN)$$
                
    $$MF: void    undo()$$
    $$MF: void    undo_n(size_t DeltaN_Backward)$$
                
public:
    bool        resources_absent() { return QUEX_NAME(resources_absent)(this); }

    /*__( General Information )________________________________________________
     *                                                                       */
    $$MF: const char*  version()$$
    $$MF: void         print_this()$$
    $$MF: const char*  input_name()$$
    $$MF: bool         input_name_set(const char* InputName)$$
    /* Activate/deactivate byte order reversion (big-/little-endian)          */
    $$MF: bool byte_order_reversion()$$
    $$MF: void byte_order_reversion_set(bool Value)$$


    $$MF: void error_code_clear()$$
    $$MF: bool error_code_is_void()$$
    $$MF: void error_code_set_void()$$
    $$MF: void error_code_set_if_first(E_Error ErrorCode)$$

public:
#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
/* START: User's class body extensions _______________________________________*/
$$CLASS_BODY_EXTENSION$$
/* END: ______________________________________________________________________*/
#undef  self

public:
    // Token sending happens only via 'self_send*(...)' macros
};

QUEX_NAMESPACE_MAIN_CLOSE

$$EPILOG$$

$$INC: analyzer/headers.i$$
/* START: User defined header content _________________________________________
 *        The 'footer' content relies on class definitions made above.        */
$$USER_DEFINED_FOOTER$$

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$ */
