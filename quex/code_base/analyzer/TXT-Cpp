/* -*- C++ -*-   vim: set syntax=cpp:
 * CONTENT: 
 *
 * (1) Includes for required standard headers.
 * (2) Definitions of options and settings for the particular application.
 * (3) $$INC: definitions$$ for default settings.
 * (4) Lexical FSM class $$LEXER_CLASS_NAME$$ and its memento class.
 * (5) Constructor and init core of $$LEXER_CLASS_NAME$$.
 * (6) Memento pack and unpack functions.
 *
 * File content generated by Quex $$QUEX_VERSION$$.
 *
 * (C) 2005-2012 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                                      */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$
#define __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$

#include <cstddef>
$$INC: quex/compatibility/stdint.h$$
#include "$$LEXER_CONFIG_FILE$$"

$$INC: definitions$$

/* Forward declarations ______________________________________________________*/
QUEX_NAMESPACE_MAIN_OPEN 
class QUEX_NAME(Memento);
class $$LEXER_CLASS_NAME$$;    
$$LEXER_DERIVED_CLASS_DECL$$
typedef void  (*QUEX_NAME(AnalyzerFunctionP))(QUEX_TYPE_ANALYZER*);
QUEX_NAMESPACE_MAIN_CLOSE

QUEX_NAMESPACE_TOKEN_OPEN
class QUEX_TYPE0_TOKEN;
QUEX_NAMESPACE_TOKEN_CLOSE

/* User defined header content ________________________________________________
 * Must come before token class definition, since the token class 
 * might rely on contents of the header.                                     */
$$USER_DEFINED_HEADER$$

/* Declaration of all basic classes ___________________________________________
 *                                                                           */
$$INC: declarations$$

/* Token class and token id definitions _______________________________________
 *                                                                           */
#include "$$TOKEN_ID_DEFINITION_FILE$$"
QUEX_NAMESPACE_MAIN_OPEN 
extern const char* QUEX_NAME(map_token_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID);
QUEX_NAMESPACE_MAIN_CLOSE 
#include "$$TOKEN_CLASS_DEFINITION_FILE$$"

QUEX_NAMESPACE_MAIN_OPEN 

$$MODE_OBJECTS$$

$$MODE_SPECIFIC_ANALYSER_FUNCTIONS$$

typedef bool (*QUEX_NAME(callback_on_token_type))(QUEX_TYPE_TOKEN*);

class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_NAME(Memento) {
public:
    QUEX_NAME(Memento)()  {} /* Con- and Destruction necessary to trigger */
    ~QUEX_NAME(Memento)() {} /* con- and destruction of user members.     */

    char*                             __input_name;
    QUEX_NAME(Buffer)                 buffer;

    const struct QUEX_NAME(Mode_tag)* __current_mode_p; 
    QUEX_NAME(AnalyzerFunctionP)      current_analyzer_function;
#   if defined(QUEX_OPTION_COUNTER)
    QUEX_NAME(Counter)                counter;
#   endif
#   ifdef QUEX_OPTION_INDENTATION_TRIGGER
    bool                              _indentation_handler_active_f;
#   endif
    QUEX_NAME(Memento)*               _parent_memento;

/* START: User's memento extentions __________________________________________*/
$$MEMENTO_EXTENSIONS$$
/* END: ______________________________________________________________________*/

#   if defined(QUEX_OPTION_ASSERTS)
    QUEX_NAME(AnalyzerFunctionP)    DEBUG_analyzer_function_at_entry;
#   endif
};

class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG $$LEXER_CLASS_NAME$$ {
public:
    /* __( Data Members )_______________________________________________________
     *                                                                        */
    QUEX_NAME(Buffer)               buffer;
    QUEX_NAME(TokenQueue)           _token_queue;  
    QUEX_NAME(ModeStack)            _mode_stack;

    E_Error                         error_code;
    char*                           __input_name;

    const QUEX_NAME(Mode)*          __current_mode_p; 
    /* Shortcut to current mode's analyzer function.                          */
    QUEX_NAME(AnalyzerFunctionP)    current_analyzer_function;
#   if defined(QUEX_OPTION_ASSERTS)
    /* Backup of analyzer's function pointer => mode change detection.        */
    QUEX_NAME(AnalyzerFunctionP)    DEBUG_analyzer_function_at_entry;
#   endif
#   if defined(QUEX_OPTION_COUNTER)
    QUEX_NAME(Counter)              counter;
#   endif
#   ifdef QUEX_OPTION_INDENTATION_TRIGGER
    bool                            _indentation_handler_active_f;
#   endif
    QUEX_NAME(Memento)*             _parent_memento;

public:
    typedef QUEX_TYPE_TOKEN      token_type;
    typedef QUEX_TYPE_TOKEN_ID   token_id_type;
    typedef QUEX_TYPE_LEXATOM    char_type;

    /*__( Constructors )________________________________________________________
     *                                                                        */
    $$LEXER_CLASS_NAME$$()
         { QUEX_NAME(MF_resources_absent_mark)(this); error_code = E_Error_Uninitialized; }

    $$LEXER_CLASS_NAME$$(const char*      Filename, 
    $$___SPACE___$$ QUEX_NAME(Converter)* Converter = 0) 
         { QUEX_NAME(from_file_name)(this, Filename, Converter); }

    $$LEXER_CLASS_NAME$$(QUEX_NAME(ByteLoader)*  byte_loader, 
    $$___SPACE___$$ QUEX_NAME(Converter)*        Converter = 0) 
         { QUEX_NAME(from_ByteLoader)(this, byte_loader, Converter); }

    $$LEXER_CLASS_NAME$$(QUEX_TYPE_LEXATOM* BufferMemoryBegin, 
    $$___SPACE___$$ size_t                  BufferMemorySize,
    $$___SPACE___$$ QUEX_TYPE_LEXATOM*      BufferEndOfContentP = 0x0)
         { QUEX_NAME(from_memory)(this, BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

    /* Named placement-new functions.                                         */
    static $$LEXER_CLASS_NAME$$* from_file_name(const char*           Filename, 
    $$___SPACE___$$                             QUEX_NAME(Converter)* Converter = 0) 
         { return new $$LEXER_CLASS_NAME$$(Filename, Converter); }

    static $$LEXER_CLASS_NAME$$* from_ByteLoader(QUEX_NAME(ByteLoader)*  byte_loader, 
    $$___SPACE___$$                              QUEX_NAME(Converter)*   Converter = 0) 
         { return new $$LEXER_CLASS_NAME$$(byte_loader, Converter); }

    static $$LEXER_CLASS_NAME$$* from_memory(QUEX_TYPE_LEXATOM* BufferMemoryBegin, 
    $$___SPACE___$$                          size_t             BufferMemorySize,
    $$___SPACE___$$                          QUEX_TYPE_LEXATOM* BufferEndOfContentP = 0x0)
         { return new $$LEXER_CLASS_NAME$$(BufferMemoryBegin, BufferMemorySize, BufferEndOfContentP); }

    virtual ~$$LEXER_CLASS_NAME$$()
         { QUEX_NAME(destruct)(this); }
public:
    /*__( Reset )_______________________________________________________________
     *                                                                        */
    $$MF: bool reset()$$
    $$MF: bool reset_file_name(const char* FileName, QUEX_NAME_Converter_*  Converter = 0)$$
    $$MF: bool reset_ByteLoader(QUEX_NAME_ByteLoader_*  byte_loader, QUEX_NAME_Converter_*   Converter = 0)$$
    $$MF: bool reset_memory(QUEX_TYPE_LEXATOM* BufferMemoryBegin, size_t BufferMemorySize, QUEX_TYPE_LEXATOM* BufferEndOfContentP)$$

    /*__( Include From and To Substream )_______________________________________
     *                                                                        */
    $$MF: bool include_push_file_name(const char* FileName, QUEX_NAME_Converter_* Converter = 0)$$
    $$MF: bool include_push_ByteLoader(const char* InputName, QUEX_NAME_ByteLoader_*  byte_loader, QUEX_NAME_Converter_*   Converter)$$
    $$MF: bool include_push_memory(const char* InputName, QUEX_TYPE_LEXATOM* BufferMemoryBegin, size_t BufferMemorySize, QUEX_TYPE_LEXATOM* BufferEndOfContentP)$$
    $$MF: bool include_pop()$$
    $$MF: void include_stack_delete()$$
    $$MF: bool include_detect_recursion(const char* InputName)$$

    /*__( Receiving Tokens -- from outside lexer )_____________________________
     *                                                                       */
    $$MF: bool run(QUEX_NAME_callback_on_token_type_ on_token, bool ErrorPrintF)$$
    $$MF: void receive(QUEX_TYPE_TOKEN** token_pp)$$

    /*__( Sending Tokens -- from inside lexer )________________________________
     *                                                                       */
    $$MF: QUEX_TYPE_TOKEN*  token_p()$$

    $$MF: void send(QUEX_TYPE_TOKEN_ID Id)$$
    $$MF: void send_n(QUEX_TYPE_TOKEN_ID Id, size_t RepetitionN)$$
    $$MF: bool send_text(QUEX_TYPE_TOKEN_ID Id, QUEX_TYPE_LEXATOM* BeginP, QUEX_TYPE_LEXATOM* EndP)$$
    $$MF: bool send_string(QUEX_TYPE_TOKEN_ID Id, QUEX_TYPE_LEXATOM* ZeroTerminatedString)$$

    /*__( Mode Handling )______________________________________________________
     *                                                                       */
    $$MF: const QUEX_NAME_Mode_*  mode()$$
    $$MF: void                    set_mode_brutally(const QUEX_NAME_Mode_* Mode)$$
    $$MF: void                    enter_mode(const QUEX_NAME_Mode_* TargetMode)$$

    $$MF: void pop_mode()$$
    $$MF: void pop_drop_mode()$$
    $$MF: void push_mode(QUEX_NAME_Mode_* new_mode)$$

    /*__( Line/Column Counter )________________________________________________
     *                                                                       */
    $$MF: <count-line>   size_t line_number() const$$
    $$MF: <count-line>   size_t line_number_at_begin() const$$
    $$MF: <count-line>   size_t line_number_at_end() const$$
    $$MF: <count-line>   void   line_number_set(size_t Y)$$

    $$MF: <count-column> size_t column_number() const$$
    $$MF: <count-column> size_t column_number_at_begin() const$$
    $$MF: <count-column> size_t column_number_at_end() const$$
    $$MF: <count-column> void   column_number_set(size_t X)$$

    /*__( Indentation )________________________________________________________
     *                                                                       */
    $$MF: <indentation>  size_t  indentation() const$$

public:
    /*__( General Information )________________________________________________
     *                                                                       */
    $$MF: const char*  version()$$
    $$MF: void         print_this()$$
    $$MF: const char*  input_name()$$
    $$MF: bool         input_name_set(const char* InputName)$$

    /*__( Navigation: Tell/Seek )______________________________________________
     *                                                                       */
    $$MF: size_t  tell()$$
    $$MF: void    seek(const size_t CharacterIndex)$$
    $$MF: void    seek_forward(const size_t CharacterN)$$
    $$MF: void    seek_backward(const size_t CharacterN)$$
                
    $$MF: void    undo()$$
    $$MF: void    undo_n(size_t DeltaN_Backward)$$

    /*__( Byte Order Reversion Activation / Deactivation )_____________________
     *                                                                       */
    $$MF: bool byte_order_reversion()$$
    $$MF: void byte_order_reversion_set(bool Value)$$

    /*__( Error Codes )________________________________________________________
     *                                                                       */
    $$MF: void error_code_clear()$$
    $$MF: bool error_code_is_void()$$
    $$MF: void error_code_set_void()$$
    $$MF: void error_code_set_if_first(E_Error ErrorCode)$$

    /*__( Deep Resources )_____________________________________________________
     *                                                                       */
    $$MF: void collect_user_memory(QUEX_TYPE_LEXATOM** user_memory_p)$$
    $$MF: void resources_absent_mark()$$
    $$MF: bool resources_absent()$$

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
/* START: User's class body extensions _______________________________________*/
$$CLASS_BODY_EXTENSION$$
/* END: ______________________________________________________________________*/
#undef  self

public:
    /* Befriend all modes                                                     */
$$MODE_CLASS_FRIENDS$$  
private:
    $$LEXER_CLASS_NAME$$(const $$LEXER_CLASS_NAME$$&);                   /* Forbidden */
    $$LEXER_CLASS_NAME$$& operator=(const $$LEXER_CLASS_NAME$$& Other); /* Forbidden */

};

QUEX_NAMESPACE_MAIN_CLOSE

$$EPILOG$$

$$INC: implementations-inline.i$$

/* START: User defined header content _________________________________________
 *        The 'footer' content relies on class definitions made above.        */
$$USER_DEFINED_FOOTER$$

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$ */
