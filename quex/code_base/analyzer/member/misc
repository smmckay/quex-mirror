/* -*- C++ -*- vim: set syntax=cpp:
 * (C) 2005-2016 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                                    */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__MEMBER__MISC
#define __QUEX_INCLUDE_GUARD__ANALYZER__MEMBER__MISC

$$INC: definitions$$

QUEX_NAMESPACE_MAIN_OPEN

#ifdef QUEX_OPTION_INDENTATION_TRIGGER
QUEX_INLINE void        QUEX_NAME(indentation_handler_switch)(QUEX_TYPE_ANALYZER* me, bool ActiveF);
QUEX_INLINE bool        QUEX_NAME(indentation_handler_is_active)(QUEX_TYPE_ANALYZER* me);
#endif

QUEX_INLINE void        QUEX_NAME(MF_error_code_clear)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE bool        QUEX_NAME(MF_error_code_is_void)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void        QUEX_NAME(MF_error_code_set_void)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void        QUEX_NAME(MF_error_code_set_if_first)(QUEX_TYPE_ANALYZER* me, E_Error ErrorCode);

/* Activate/deactivate byte order reversion (big-/little-endian) */
QUEX_INLINE bool        QUEX_NAME(MF_byte_order_reversion)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void        QUEX_NAME(MF_byte_order_reversion_set)(QUEX_TYPE_ANALYZER* me,
                                                            bool                Value);
/* Version information */
QUEX_INLINE const char* QUEX_NAME(MF_version)(QUEX_TYPE_ANALYZER* me); 

QUEX_INLINE QUEX_TYPE_TOKEN*  QUEX_NAME(MF_token_p)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void              QUEX_NAME(MF_send)(QUEX_TYPE_ANALYZER* me, 
                                                 QUEX_TYPE_TOKEN_ID  Id);
QUEX_INLINE void              QUEX_NAME(MF_send_n)(QUEX_TYPE_ANALYZER* me, 
                                                   QUEX_TYPE_TOKEN_ID  Id, 
                                                   size_t              RepetitionN);
QUEX_INLINE bool              QUEX_NAME(MF_send_text)(QUEX_TYPE_ANALYZER* me, 
                                                      QUEX_TYPE_TOKEN_ID  Id,
                                                      QUEX_TYPE_LEXATOM*  BeginP, 
                                                      QUEX_TYPE_LEXATOM*  EndP);
QUEX_INLINE bool              QUEX_NAME(MF_send_string)(QUEX_TYPE_ANALYZER* me,
                                                        QUEX_TYPE_TOKEN_ID  Id,
                                                        QUEX_TYPE_LEXATOM*  ZeroTerminatedString);

QUEX_INLINE const char*
                 QUEX_NAME(MF_input_name)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE bool QUEX_NAME(MF_input_name_set)(QUEX_TYPE_ANALYZER* me, 
                                              const char*         InputNameP);
/* Print */
QUEX_INLINE void    QUEX_NAME(MF_print_this)(QUEX_TYPE_ANALYZER* me);
extern      void    QUEX_NAME(user_print)(QUEX_TYPE_ANALYZER* me);

#ifdef  QUEX_OPTION_COUNTER_LINE
QUEX_INLINE size_t QUEX_NAME(MF_line_number)(const QUEX_TYPE_ANALYZER* me);
QUEX_INLINE size_t QUEX_NAME(MF_line_number_at_begin)(const QUEX_TYPE_ANALYZER* me);
QUEX_INLINE size_t QUEX_NAME(MF_line_number_at_end)(const QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void   QUEX_NAME(MF_line_number_set)(QUEX_TYPE_ANALYZER* me, size_t Y);
#endif
#ifdef  QUEX_OPTION_COUNTER_COLUMN
QUEX_INLINE size_t QUEX_NAME(MF_column_number)(const QUEX_TYPE_ANALYZER* me);
QUEX_INLINE size_t QUEX_NAME(MF_column_number_at_begin)(const QUEX_TYPE_ANALYZER* me);
QUEX_INLINE size_t QUEX_NAME(MF_column_number_at_end)(const QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void   QUEX_NAME(MF_column_number_set)(QUEX_TYPE_ANALYZER* me, size_t X);
#endif
#ifdef   QUEX_OPTION_INDENTATION_TRIGGER
QUEX_INLINE size_t  QUEX_NAME(MF_indentation)(const QUEX_TYPE_ANALYZER* me);
#endif

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__MEMBER__MISC */

