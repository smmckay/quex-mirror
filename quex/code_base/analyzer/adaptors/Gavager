/* -*- C++ -*-   vim:set syntax=cpp:
 * 
 * PURPOSE: Gavaging -- Running lexical analysis based on content that is fed
 *                      via direct access to the analyzer's internal buffer.
 *
 * See file 'Gavager.i' for detailed description.
 * 
 * (C) 2016 Frank-Rene Schaefer.                                             */
#ifndef QUEX_INCLUDE_GUARD__ANALYZER__ADAPTORS__GAVAGER
#define QUEX_INCLUDE_GUARD__ANALYZER__ADAPTORS__GAVAGER

$$INC: analyzer/adaptors/Feeder$$

QUEX_NAMESPACE_MAIN_OPEN

$$<Cpp>------------------------------------------------------------------------
struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT QUEX_NAME(Gavager) {
    QUEX_NAME(FeederBase)  base;

public:
    QUEX_NAME(Gavager)(QUEX_TYPE_ANALYZER*, QUEX_TYPE_TOKEN_ID);
    bool              access(void**       begin_p, 
                             const void** end_p);
    bool              gavage(ptrdiff_t    ReceivedN);
    QUEX_TYPE_TOKEN*  deliver();
};
$$-----------------------------------------------------------------------------

$$<C>--------------------------------------------------------------------------
typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT QUEX_NAME(Gavager_tag) {
    QUEX_NAME(FeederBase)  base;

    bool              (*access)(struct QUEX_NAME(Gavager_tag)* me,
                                void**                         begin_p, 
                                const void**                   end_p);
    bool              (*gavage)(struct QUEX_NAME(Gavager_tag)* me, 
                                ptrdiff_t                      ReceivedN);
    QUEX_TYPE_TOKEN*  (*deliver)(struct QUEX_NAME(Gavager_tag)* me);

} QUEX_NAME(Gavager);

$$-----------------------------------------------------------------------------

QUEX_INLINE void  QUEX_NAME(Gavager_construct)(QUEX_NAME(Gavager)*  me, 
                                               QUEX_TYPE_ANALYZER*  lexer,
                                               QUEX_TYPE_TOKEN_ID   StreamTerminatingTokenId);
QUEX_INLINE bool  QUEX_NAME(Gavager_access)(QUEX_NAME(Gavager)* me,
                                            void**              begin_p, 
                                            const void**        end_p);
QUEX_INLINE bool  QUEX_NAME(Gavager_gavage)(QUEX_NAME(Gavager)* me, 
                                            ptrdiff_t           ReceivedN);
QUEX_INLINE QUEX_TYPE_TOKEN*  
                  QUEX_NAME(Gavager_deliver)(QUEX_NAME(Gavager)* me);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* QUEX_INCLUDE_GUARD__ANALYZER__ADAPTORS__GAVAGER */
