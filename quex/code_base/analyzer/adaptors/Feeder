/* -*- C++ -*-   vim:set syntax=cpp:
 * 
 * PURPOSE: A 'feeder' coordinates the lexical analysis based on input that
 *          is *NOT* delivered through a byte loader in the background. 
 *
 * See file 'Feeder.i' for detailed descriptions.
 *
 * (C) 2016 Frank-Rene Schaefer.                                             */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__ADAPTORS__FEEDER
#define __QUEX_INCLUDE_GUARD__ANALYZER__ADAPTORS__FEEDER

#ifndef QUEX_TYPE_ANALYZER
#   error "This header must be included after the lexical analyzer definition."
#endif
#ifndef QUEX_TYPE_TOKEN
#   error "This header must be included after the token class definition."
#endif

QUEX_NAMESPACE_MAIN_OPEN

typedef struct {
    QUEX_TYPE_ANALYZER* lexer;
    QUEX_TYPE_LEXATOM*  last_incomplete_lexeme_p;
    QUEX_TYPE_TOKEN_ID  stream_terminating_token_id;
} QUEX_NAME(FeederBase);

#define QUEX_TYPE_FEEDER      QUEX_NAME(Feeder) 

#ifndef __QUEX_OPTION_PLAIN_C
struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_TYPE_FEEDER {
#else
typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG QUEX_NAME(Feeder_tag) {
#endif
    QUEX_NAME(FeederBase)  base;

    struct {
        const void* begin_p;
        const void* end_p;
    } external_chunk;

    QUEX_TYPE_TOKEN_ID  stream_terminating_token_id;

#ifndef __QUEX_OPTION_PLAIN_C
public:
    QUEX_TYPE_FEEDER(QUEX_TYPE_ANALYZER*, QUEX_TYPE_TOKEN_ID);
    void             feed(const void* BeginP, const void* EndP);
    QUEX_TYPE_TOKEN* deliver();
};
#else
    void             (*feed)(struct QUEX_NAME(Feeder_tag)*, 
                             const void* BeginP, const void* EndP);
    QUEX_TYPE_TOKEN* (*deliver)(struct QUEX_NAME(Feeder_tag)*);
} QUEX_TYPE_FEEDER;
#endif


QUEX_INLINE void             QUEX_NAME(Feeder_construct)(QUEX_TYPE_FEEDER*   me, 
                                                         QUEX_TYPE_ANALYZER* lexer,
                                                         QUEX_TYPE_TOKEN_ID  StreamTerminatingTokenId);
QUEX_INLINE QUEX_TYPE_TOKEN* QUEX_NAME(Feeder_deliver)(QUEX_TYPE_FEEDER* me);
QUEX_INLINE void             QUEX_NAME(Feeder_feed)(QUEX_TYPE_FEEDER* me,
                                                    const void* BeginP, 
                                                    const void* EndP);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__ADAPTORS__FEEDER */
