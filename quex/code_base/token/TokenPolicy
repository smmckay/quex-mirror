/* -*- C++ -*- vim: set syntax=cpp: 
 *
 * PURPOSE: 'self-ishnes' for TokenQueue operations:
 *
 * Implement macros to facilitate implementation of operations as re-action to
 * mode-related events.
 *
 * REQUIRES: The macros only work in environments where:
 * 
 *      (i)  'self'              refers to the lexical analyzer object.
 *      (ii) 'self._token_queue' refers to the TokenQueue object of
 *                               the lexical analyzer.
 *
 * (C) 2005-2017 Frank-Rene Schaefer                                          */
$$INC: token/TokenQueue$$
$$INC: lexeme$$

/* NO INCLUDE GUARDS -- THIS FILE MIGHT BE INCLUDED TWICE FOR MULTIPLE
 *                      LEXICAL ANALYZERS
 *
 * NOT: #ifndef  __QUEX_INCLUDE_GUARD__TOKEN__TOKEN_POLICY
 * NOT: #define  __QUEX_INCLUDE_GUARD__TOKEN__TOKEN_POLICY              
 *
 * Instead of an include guard, there is an include indicator 
 *
 *         __QUEX_INCLUDE_INDICATOR__TOKEN_POLICY__
 *
 * If the indicator is defined at the entry of this file, all internally 
 * defined macros are undefined right at the beginning, so they can be 
 * safely redefined.                                                         */
#ifdef __QUEX_INCLUDE_INDICATOR__TOKEN_POLICY__
#    undef self_write_token_p
#    undef self_token_get_id
#    undef self_token_take_text
#    undef self_token_repetition_n_set
#    undef self_send
#    undef self_send1
#    undef self_send2

#    if 0
#    undef QUEX_ACTION_TOKEN_STAMP
#    undef QUEX_ACTION_TOKEN_STAMP_LINE_NUMBER
#    undef QUEX_ACTION_TOKEN_STAMP_COLUMN_NUMBER
#    endif
#else
#    define __QUEX_INCLUDE_INDICATOR__TOKEN_POLICY__
#endif
/*____________________________________________________________________________*/

/* Token access. _______________________________________________________________
 *
 * Provide access to the currently to-be-sent token from the token queue.     */
#define self_write_token_p()             (self._token_queue.write_iterator)

/* Token content writing _______________________________________________________
 *
 * Setting 'id' and 'text' (most likely == lexeme) of the content.              
 * The 'self_token_take_text' only works if the token class provides a corres-
 * ponding member function. Quex generated token classes do so.               */
#define self_token_get_id()              (self_write_token_p()->id)

#define self_token_take_text(Begin, End) QUEX_NAME_TOKEN(take_text)(self_write_token_p(), (Begin), (End))

#if defined(QUEX_OPTION_TOKEN_REPETITION_SUPPORT)
#  define self_token_repetition_n_set(N) \
          QUEX_NAME_TOKEN(repetition_n_set)(self_write_token_p(), (N)) 
#else 
#  define self_token_repetition_n_set(N)                                                   \
          do {                                                                             \
              QUEX_NAME(error_code_set_if_first)(&self, E_Error_TokenRepetitionNSetButNotSupportedByGeneratedCode); \
              QUEX_NAME(TokenQueue_set_token_TERMINATION)(&self._token_queue);             \
              RETURN;                                                                      \
          } while(0)
#endif



/* NO INCLUDE GUARDS (see above) */
