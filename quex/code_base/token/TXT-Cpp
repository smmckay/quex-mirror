/* -*- C++ -*-   vim: set syntax=cpp: 
 * (C) 2004-2009 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY
 */
#ifndef QUEX_INCLUDE_GUARD_$$LEXER_CLASS$$__TOKEN__GENERATED__$$INCLUDE_GUARD_EXTENSION$$
#define QUEX_INCLUDE_GUARD_$$LEXER_CLASS$$__TOKEN__GENERATED__$$INCLUDE_GUARD_EXTENSION$$

$$HEADER$$
 
$$HELPER_DEFINITIONS$$

QUEX_NAMESPACE_TOKEN_OPEN

class $$TOKEN_CLASS$$;

QUEX_INLINE void         $$TOKEN_CLASS$$_construct($$TOKEN_CLASS$$*);
QUEX_INLINE void         $$TOKEN_CLASS$$_copy($$TOKEN_CLASS$$*, const $$TOKEN_CLASS$$*);
QUEX_INLINE void         $$TOKEN_CLASS$$_destruct($$TOKEN_CLASS$$*);

/* NOTE: Setters and getters as in the C++ version of the token class are not
 *       necessary, since the members are accessed directly.                   */

QUEX_INLINE void         $$TOKEN_CLASS$$_set($$TOKEN_CLASS$$*            me, 
                                          const QUEX_TYPE_TOKEN_ID ID);

#ifdef QUEX_OPTION_TOKEN_TAKE_TEXT_SUPPORT
QUEX_INLINE bool         $$TOKEN_CLASS$$_take_text($$TOKEN_CLASS$$*            me, 
                                                const QUEX_TYPE_LEXATOM* Begin, 
                                                const QUEX_TYPE_LEXATOM* End);
#endif

#ifdef QUEX_OPTION_TOKEN_REPETITION_SUPPORT
QUEX_INLINE size_t       $$TOKEN_CLASS$$_repetition_n_get($$TOKEN_CLASS$$*);
QUEX_INLINE void         $$TOKEN_CLASS$$_repetition_n_set($$TOKEN_CLASS$$*, size_t);
#endif /* QUEX_OPTION_TOKEN_REPETITION_SUPPORT */


class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG $$TOKEN_CLASS$$ {
public:
    $$TOKEN_CLASS$$();
    $$TOKEN_CLASS$$(const $$TOKEN_CLASS$$& That);
    /* operator=(..): USE WITH CAUTION--POSSIBLE MAJOR PERFORMANCE DECREASE! 
     *                BETTER USE __copy(That)                                */
    $$TOKEN_CLASS$$& operator=(const $$TOKEN_CLASS$$& That);
    $$VIRTUAL_DESTRUCTOR$$~$$TOKEN_CLASS$$();

$$DISTINCT_MEMBERS$$
$$UNION_MEMBERS$$
public:
$$SETTERS_GETTERS$$
    void set(const QUEX_TYPE_TOKEN_ID ID) { id = ID; }
$$QUICK_SETTERS$$

    public:
        /* _line_n, _column_n, and id are public, so that the token policy 
         * can access it. making it private would imply complications for 
         * user customized token classes. The token policies should be the
         * same for C and Cpp.                                               */
        QUEX_TYPE_TOKEN_ID    id;

#   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#       ifdef QUEX_OPTION_COUNTER_LINE
    public:
        QUEX_TYPE_TOKEN_LINE_N    _line_n;
        QUEX_TYPE_TOKEN_LINE_N    line_number() const                                 { return _line_n; }
        void                      set_line_number(const QUEX_TYPE_TOKEN_LINE_N Value) { _line_n = Value; }
#       endif
#       ifdef  QUEX_OPTION_COUNTER_COLUMN
    public:
        QUEX_TYPE_TOKEN_COLUMN_N  _column_n;
        QUEX_TYPE_TOKEN_COLUMN_N  column_number() const                                   { return _column_n; }
        void                      set_column_number(const QUEX_TYPE_TOKEN_COLUMN_N Value) { _column_n = Value; }
#       endif
#   endif
    public:
#   define self (*this)
$$BODY$$
#   undef  self

    private:
        friend void $$TOKEN_CLASS$$_copy($$TOKEN_CLASS$$*       __this, 
                                         const $$TOKEN_CLASS$$* That);
        friend bool $$TOKEN_CLASS$$_take_text($$TOKEN_CLASS$$*             __this, 
                                              const QUEX_TYPE_LEXATOM*  Begin, 
                                              const QUEX_TYPE_LEXATOM*  End);
};

QUEX_NAMESPACE_TOKEN_CLOSE

$$FOOTER$$

extern QUEX_TYPE_LEXATOM QUEX_NAME(LexemeNull);

#endif /* QUEX_INCLUDE_GUARD_$$LEXER_CLASS$$__TOKEN__GENERATED__$$INCLUDE_GUARD_EXTENSION$$ */
