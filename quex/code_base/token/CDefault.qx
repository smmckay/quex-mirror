token_type {
   header {
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <$$OUTPUT_DIR$$/lib/quex/compatibility/stdint.h>
#include <$$OUTPUT_DIR$$/lib/quex/MemoryManager>
#include <$$OUTPUT_DIR$$/lib/definitions>
#include <$$OUTPUT_DIR$$/lib/asserts>
#include <$$OUTPUT_DIR$$/lib/lexeme_base>
#include <$$OUTPUT_DIR$$/converter-from-lexeme>

struct $$TOKEN_CLASS$$_tag;

QUEX_NAMESPACE_MAIN_OPEN

extern QUEX_TYPE_LEXATOM QUEX_NAME(LexemeNull);
extern const char*       QUEX_NAME(map_token_id_to_name)(const QUEX_TYPE_TOKEN_ID);

QUEX_NAMESPACE_MAIN_CLOSE

extern const char*       $$TOKEN_CLASS$$_get_string(struct $$TOKEN_CLASS$$_tag* me,  
                                                    char*                       buffer, 
                                                    size_t                      BufferSize); 

   }
   standard {
        id            : uint32_t;
        line_number   : size_t;
        column_number : size_t;
   }
   distinct {
       text   :  const QUEX_TYPE_LEXATOM*;
       number :  size_t;
   }

   inheritable;

   constructor {
       self.number = 0;
       self.text   = LexemeNull;
   }

   destructor {
       if( self.text != LexemeNull ) {
           QUEX_GNAME_LIB(MemoryManager_free)((void*)self.text,
                                      E_MemoryObjectType_TEXT);
           self.text = LexemeNull;
       }
   }

   copy {
        self.id  = Other.id;

        if( self.text != LexemeNull ) {
            QUEX_GNAME_LIB(MemoryManager_free)((void*)self.text, E_MemoryObjectType_TEXT);
        }
        if( Other.text != LexemeNull ) {
            self.text = QUEX_GNAME(lexeme_clone)(self.text, 
                                                 QUEX_GNAME(lexeme_length)(Other.text));
            if( ! self.text ) self.text = LexemeNull;
        }
        self.number = Other.number;

        $$<token-stamp-line>   self._line_n   = Other._line_n;$$
        $$<token-stamp-column> self._column_n = Other._column_n;$$
   }

   take_text {

#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1" */
        {
            const QUEX_TYPE_LEXATOM* it = (void*)0x0;
            printf("previous:  '");
            if( self.text != LexemeNull ) {
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
            printf("take_text: '");
            for(it = Begin; it != End; ++it) printf("%04X.", (int)*it);
            printf("%04X.", (int)*it);
            printf("'\n");
        }
#       endif

        if( self.text != LexemeNull ) {
            QUEX_GNAME_LIB(MemoryManager_free)((void*)self.text, E_MemoryObjectType_TEXT);
        }
        if( Begin != LexemeNull ) {
            __quex_assert(End >= Begin);
            self.text = QUEX_GNAME(lexeme_clone)(Begin, (size_t)(End - Begin));
            if( ! self.text ) self.text = LexemeNull;
            *((QUEX_TYPE_LEXATOM*)(self.text + (End - Begin))) = (QUEX_TYPE_LEXATOM)0;
        } else {
            self.text = LexemeNull;
        }

#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1"       */
        {
            const QUEX_TYPE_LEXATOM* it = 0x0;
            printf("after:     '");
            if( self.text != LexemeNull ) { 
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
        }
#       endif

        /* This token copied the text from the chunk into the string, 
         * so we do not claim ownership over it.                             */
        return false;
   }

   body {
       /* Nothing here. */
   }

   repetition_set {
       self.number = N;
   }

   repetition_get {
       return self.number;
   }

   footer {
        const char* 
        $$TOKEN_CLASS$$_get_string($$TOKEN_CLASS$$* me, char*   buffer, size_t  BufferSize) 
        {
            const char*  token_id_str = QUEX_GNAME(map_token_id_to_name)(me->id);
            const char*  BufferEnd    = buffer + BufferSize;
            char*        writerator   = 0;

            if( ! BufferSize ) return NULL;

            /* Token Type */
            writerator = buffer; 
            writerator += __QUEX_STD_strlcpy(writerator, token_id_str, 
                                             BufferEnd - writerator);

            /* Opening Quote */
            if( BufferEnd - writerator > 2 ) {
                *writerator++ = ' ';
                *writerator++ = '\'';
            }

            /* The String */
            writerator = QUEX_GNAME(lexeme_to_pretty_char)(me->text, writerator, BufferEnd);

            /* Closing Quote */
            if( BufferEnd - writerator > 1 ) {
                *writerator++ = '\'';
            }
            *writerator = '\0';
            return buffer;
        }

#include <$$OUTPUT_DIR$$/converter-from-lexeme.i>
#include <$$OUTPUT_DIR$$/lib/lexeme_base.i>
   }
}

