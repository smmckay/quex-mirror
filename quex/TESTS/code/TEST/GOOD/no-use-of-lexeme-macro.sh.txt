The Lexeme macro does some safety checks when compiled with
QUEX_OPTION_ASSERTS_EXT. These checks are sometimes nonsense in
generated code. This test checks that no code is generated
that referes to the Lexeme macros.

Following lines are suppossed to be accepted:

~/prj/quex/trunk/quex ~/prj/quex/trunk/quex/TESTS/code/TEST
./constants.py:195:           "LexemeEnd",
./engine/state_machine/TEST_help/walk.py:14:def do(Dfa, Lexeme):
./engine/state_machine/TEST_help/walk.py:15:    """'Lexeme' can be list of characters (string) or list of numbers.
./engine/state_machine/TEST_help/walk.py:17:    __print(__get_step_list(Dfa, Lexeme))
./engine/state_machine/TEST_help/walk.py:74:def __get_step_list(Dfa, Lexeme):
./engine/state_machine/TEST_help/walk.py:77:    for input_position, lexatom in enumerate(Lexeme):
./input/command_line/validation.py:87:            error.log("Lexeme-converter-only-mode requires explicit definition of encoding.\n"
./input/command_line/validation.py:90:            error.log("Lexeme-converter-only-mode requires explicit definition of the code unit type.\n"
./input/files/code_fragment.py:22:lexeme_re = re.compile(r"^Lexeme\b")
./input/files/code_fragment.py:254:        argument_list = ["Lexeme"]
./input/files/code_fragment.py:282:        error.log("Assignment of token member with 'Lexeme' directly being involved. The\n" + 
./input/files/code_fragment.py:283:                  "'Lexeme' points into the text buffer and it is not owned by the token object.\n"
./input/files/code_fragment.py:286:                  "   (1) Use '(Lexeme)', i.e. surround 'Lexeme' by brackets to indicate\n"
./input/files/code_fragment.py:289:                  "       is not directly dependent anymore on 'Lexeme'. This is particularly\n"
./input/files/code_fragment.py:293:                  "          \"%s(Lexeme+1, LexemeEnd-2)\"\n" % TokenName + 
./input/files/code_fragment.py:294:                  "          \"%s(Lexeme)\"\n" % TokenName + 
./input/files/code_fragment.py:322:                  "     one argument:   'Lexeme'   =>  token.take_text(..., LexemeBegin, LexemeEnd);\n"
./input/files/code_fragment.py:330:        if argument_list[0] == "Lexeme":
./input/files/code_fragment.py:335:            error.log("If one unnamed argument is specified it must be 'Lexeme'\n"          + \
./input/files/code_fragment.py:338:                      "QUEX_TKN_MY_ID(Lexeme + 1, LexemeEnd - 2);\n"                             + \
./input/files/mode.py:309:                            "L": "pass Lexeme to token constructor.",
./input/files/mode.py:357:                            "L": "pass Lexeme to token constructor.",
./output/analyzer/modes.py:100:    const QUEX_TYPE_LEXATOM* LexemeEnd   = self.buffer._read_p;
./output/analyzer/modes.py:104:    (void)me; (void)LexemeBegin; (void)LexemeEnd; (void)BufferSize;
./output/analyzer/modes.py:263:                                      ("QUEX_TYPE_LEXATOM*",    "Lexeme")]],
./output/analyzer/modes.py:99:    const QUEX_TYPE_LEXATOM* LexemeBegin = self.buffer._lexeme_start_p;
./output/counter/run_time.py:106:            "%s" % Lng.ML_COMMENT("Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)\n"
./output/counter/run_time.py:109:            "    __quex_assert(LexemeBegin <= LexemeEnd);\n",
./output/counter/run_time.py:110:            "    %s" % Lng.IF("LexemeBegin", "==", "LexemeEnd"), 
./output/counter/run_time.py:113:            "    %s = LexemeBegin;\n" % IteratorName
./output/counter/run_time.py:133:           + "     __quex_assert(%s == LexemeEnd);\n" % IteratorName \
./output/counter/run_time.py:87:        + "%s(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_LEXATOM* LexemeBegin, QUEX_TYPE_LEXATOM* LexemeEnd)\n" % FunctionName \
./output/languages/cpp/dictionary.py:414:        return "%s((QUEX_TYPE_ANALYZER*)me, LexemeBegin, LexemeEnd);\n" % self.DEFAULT_COUNTER_FUNCTION_NAME(ModeName)
./output/languages/cpp/templates.py:116:    /* Lexeme setup: 
~/prj/quex/trunk/quex/TESTS/code/TEST
