from   quex.engine.misc.enum  import Enum
# import sys

INTEGER_MAX = 0x7fffffff

# E_Border's speed is critical for performance of NFA to DFA conversion.
# => implement as class
# E_Border = Enum("BEGIN", "END", "UNDEFINED", "_DEBUG_Border")
class E_Border:
    BEGIN = 1   # BEGIN > END is essential for comparison!
    END   = 0

E_Files = Enum("HEADER", 
               "HEADER_IMPLEMTATION", 
               "SOURCE", 
               "_DEBUG_Files")

#------------------------------------------------------------------------------
# StateIndices: Values to be used as target states for transitions
#------------------------------------------------------------------------------
E_StateIndices = Enum("DROP_OUT", 
                      "RELOAD_FORWARD",
                      "RELOAD_BACKWARD",
                      "BEFORE_ENTRY", 
                      "AFTER_PATH_WALK",
                      "VOID") 

E_AcceptanceCondition  = Enum("BEGIN_OF_LINE", 
                              "BEGIN_OF_STREAM", 
                              "END_OF_STREAM", 
                              "_DEBUG_NAME_E_AcceptanceCondition")

def E_AcceptanceConditionSet_string(ACSet):
    if not ACSet: return ""
    result = []
    for acc_condition_id in sorted(ACSet):
        if   acc_condition_id == E_AcceptanceCondition.BEGIN_OF_LINE:
            result.append("pre=bol")
        elif acc_condition_id == E_AcceptanceCondition.BEGIN_OF_STREAM:
            result.append("pre=bos")
        elif acc_condition_id == E_AcceptanceCondition.END_OF_STREAM:
            result.append("pre=eos")
        else: 
            result.append(("pre=%s" % acc_condition_id).replace("L", ""))
    return ", ".join(result)

def E_AcceptanceConditionSet_corresponance(AC0, AC1):
    for acc_condition_id in E_AcceptanceCondition:
        if acc_condition_id in AC0 and acc_condition_id not in AC1:
            return False
        elif acc_condition_id in AC0 and acc_condition_id not in AC1:
            return False
    return True

E_PostContextIDs = Enum("NONE", 
                        "IRRELEVANT",
                        "_DEBUG_NAME_E_PostContextIDs")

E_TransitionN = Enum("VOID", 
                     "LEXEME_START_PLUS_ONE",
                     "IRRELEVANT",
                     "_DEBUG_NAME_TransitionNs")

E_TriggerIDs = Enum("NONE", 
                    "_DEBUG_NAME_TriggerIDs")

E_InputActions = Enum("DEREF", 
                      "INCREMENT_THEN_DEREF", 
                      "DECREMENT",
                      "DECREMENT_THEN_DEREF",
                      "_DEBUG_InputActions")

E_Compression = Enum("PATH", 
                     "PATH_UNIFORM",
                     "TEMPLATE",
                     "TEMPLATE_UNIFORM",
                     "_DEBUG_Compression")

E_Count = Enum("VIRGIN", 
               "VOID",
               "NONE",
               "_DEBUG_Count")

E_CharacterCountType = Enum("COLUMN", 
                            "COLUMN_BEFORE_APPENDIX_SM",
                            "LINE", 
                            "GRID", 
                            "BAD", 
                            "WHITESPACE", 
                            #
                            "LOOP_ENTRY",
                            "LOOP_EXIT",
                            "BEFORE_RELOAD",
                            "AFTER_RELOAD",
                            # Only for interference detection
                            "X_BEGIN_NEWLINE_SUPPRESSOR",
                            "X_BEGIN_NEWLINE",
                            "X_BEGIN_COMMENT_TO_NEWLINE",
                            "X_END_NEWLINE",
                            #
                            "_DEBUG_CharacterCountType")

E_Commonality = Enum("NONE", "BOTH", "A_IN_B", "B_IN_A")

E_TerminalType = Enum("MATCH_PATTERN",   # A pattern match
                      "MATCH_FAILURE",   # Nothing has matched
                      "BAD_LEXATOM",     # Encoding error / inadmissible input
                      "LOAD_FAILURE",    # Buffer loading failed for some reason
                      "OVERFLOW",        # Lexeme too long, reload impossible
                      "END_OF_STREAM",   # End of stream has been reached
                      "PLAIN",           # Plain code (likely generated by Quex)
                      "SKIP_RANGE_OPEN",
                      "_DEBUG_TerminalType")

E_IncidenceIDs = Enum(
# Incidences encompass 'pattern acceptance events' and any other incidences
# mentioned below. IncidenceID-s are keys to the standard_incidence_db.
    "AFTER_MATCH",
    "BAD_LEXATOM",
    "LOAD_FAILURE",
    "OVERFLOW",
    "CONTEXT_FREE_MATCH",
    "END_OF_STREAM",
    "INDENTATION_BAD",
    "INDENTATION_ERROR",
    "INDENTATION_HANDLER",
    "INDENTATION_INDENT",
    "INDENTATION_NODENT",
    "INDENTATION_DEDENT",
    "INDENTATION_N_DEDENT",
    "MATCH",
    "MATCH_FAILURE",
    "MODE_ENTRY",
    "MODE_EXIT",
    "SKIP", 
    "SKIP_RANGE_OPEN",
    "RESTORE_ACCEPTANCE",
    "VOID",
    "_DEBUG_IncidenceIDs")

E_DoorIdIndex = Enum("TRANSITION_BLOCK", 
                     "ACCEPTANCE", 
                     "BIPD_RETURN", 
                     "STATE_MACHINE_ENTRY", 
                     "GLOBAL_STATE_ROUTER", 
                     "GLOBAL_END_OF_PRE_CONTEXT_CHECK", 
                     "GLOBAL_REENTRY",
                     "RETURN_WITH_ON_AFTER_MATCH",
                     "CONTINUE_WITH_ON_AFTER_MATCH",
                     "CONTINUE_WITHOUT_ON_AFTER_MATCH",
                     "_DEBUG_DoorIdIndex") 

E_Op  = Enum("Accepter",
             "Assign",
             "AssignConstant",
             "AssignPointerDifference",
             "PointerAdd",
             "PointerAssignMin",
             "ColumnCountAdd",
             "ColumnCountGridAdd",
             "ColumnCountReferencePDeltaAdd",
             "ColumnCountReferencePSet",
             "GotoDoorId",
             "GotoDoorIdIfCounterEqualZero",
             "GotoDoorIdIfInputPNotEqualPointer",
             "IfPreContextSetPositionAndGoto",
             "IndentationHandlerCall",
             "Decrement",
             "InputPDereference",
             "Increment",
             "LexemeResetTerminatingZero",
             "LineCountAdd",
             "PathIteratorSet",
             "PreContextOK",
             "PrepareAfterReload",
             "RouterByLastAcceptance",
             "RouterOnStateKey",
             "QuexDebug",
             "QuexAssertNoPassage",
             "StoreInputPosition",
             "TemplateStateKeySet",
             "_DEBUG_Commands")

E_R = Enum("AcceptanceRegister",
           "Buffer",
           "Counter",
           "Column",
           "Input",
           "Indentation",
           "InputP",
           "InputPBeforeReload",
           "LexemeStartP",
           "LexemeStartBeforeReload",
           "LexemeEnd",
           "LoopRestartP",
           "Line",
           "LoadResult",
           "PathIterator",
           "PreContextFlags",
           "PreContextVerdict",
           "CountReferenceP",
           "StandardOutput",
           "PositionRegister",
           "PositionDelta",
           "TargetStateElseIndex",
           "TargetStateIndex",
           "TemplateStateKey",
           "ThreadOfControl")

