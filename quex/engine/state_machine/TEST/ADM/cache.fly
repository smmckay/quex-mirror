{
title: Get Trigger Map (intervals --> target states);
title_group: DFA;
file_name: test-StateInfo-trigger-map.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.109076; 0; ]
]
}
{
title: Get Trigger Map (intervals --> target states);
title_group: DFA;
file_name: test-get_trigger_map.py;
hwut_info_time: 1479757922L;
result_list: [
  [ 1; OK; 0.110365; 0; ]
  [ 2; OK; 0.095739; 0; ]
  [ 3; OK; 0.110316; 0; ]
  [ 4; OK; 0.098653; 0; ]
  [ 5; OK; 0.102200; 0; ]
  [ 6; OK; 0.107263; 0; ]
  [ 7; OK; 0.150330; 0; ]
  [ 8; OK; 0.166753; 0; ]
]
}
{
title: Epsilon closure (single state);
title_group: NFA;
file_name: test-StateMachine-epsilon-closure.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.110190; 0; ]
]
}
{
title: Get elementary trigger sets (target index --> trigger sets);
title_group: NFA;
file_name: test-StateMachine-elementary_trigger_sets.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.086450; 0; ]
]
}
{
title: Get elementary trigger sets II;
title_group: NFA;
file_name: test-StateMachine-elementary_trigger_sets-2.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.058609; 0; ]
]
}
{
title: Get graphviz string of state machine.;
title_group: Plot;
file_name: test-StateMachine-get_graphviz_string.py;
hwut_info_time: 1479757922L;
result_list: [
  [ 1; OK; 0.067378; 0; ]
  [ 2; OK; 0.065043; 0; ]
]
}
{
title: Characters;
title_group: Predetermined Character Count;
file_name: test-count_character_n.py;
hwut_info_time: 1479757922L;
result_list: [
  [ Normal; FAIL; 1.057521; 0; ]
  [ BeginOfLine; FAIL; 0.868259; 0; ]
]
}
{
title: Characters of different horizontal sizes.;
title_group: Predetermined Character Count;
file_name: test-count_character_n-2.py;
hwut_info_time: 1479757922L;
result_list: [
  [ Same; FAIL; 0.490711; 0; ]
  [ Different; FAIL; 1.297956; 0; ]
  [ TwoSet; FAIL; 0.432190; 0; ]
  [ Grid; FAIL; 0.364828; 0; ]
  [ Grid-BOL; FAIL; 0.351364; 0; ]
]
}
{
title: Codec Engine;
title_group: Predetermined Character Count;
file_name: test-count_character_n-codec.py;
hwut_info_time: 1479757922L;
result_list: [
  [ UTF8; FAIL; 3.418544; 0; ]
  [ UTF16; FAIL; 1.688217; 0; ]
]
}
{
title: Newlines;
title_group: Predetermined Character Count;
file_name: test-count_newline_n.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.695545; 0; ]
]
}
{
title: Detection;
title_group: Pseudo Ambigous Post Condition;
file_name: test-ambiguous_post_condition-detect.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.684269; 0; ]
]
}
{
title: Mounting;
title_group: Pseudo Ambigous Post Condition;
file_name: test-ambiguous_post_condition-mount_pseudo.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.174174; 0; ]
]
}
{
title: The Philosophical Cut;
title_group: Pseudo Ambigous Post Condition;
file_name: test-ambiguous_post_condition-philosophical_cut.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.243219; 0; ]
]
}
{
title: Cloning;
title_group: StateMachine;
file_name: test-StateMachine-clone.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.074341; 0; ]
]
}
{
title: get_predecessor_db;
title_group: StateMachine;
file_name: test-StateMachine-get_predecessor_db.py;
hwut_info_time: 1479757922L;
result_list: [
  [ linear; OK; 0.584137; 0; ]
  [ butterfly; OK; 5.920136; 0; ]
  [ long_loop; OK; 0.660758; 0; ]
  [ nested_loop; OK; 0.182573; 0; ]
  [ mini_loop; OK; 0.059691; 0; ]
  [ fork; OK; 0.494099; 0; ]
  [ fork2; OK; 0.122708; 0; ]
  [ fork3; OK; 4.842183; 0; ]
  [ fork4; OK; 4.993712; 0; ]
  [ tree; OK; 4.671168; 0; ]
  [ mini_bubble; OK; 0.075485; 0; ]
  [ bubble; OK; 0.092034; 0; ]
  [ bubble2; OK; 0.106917; 0; ]
  [ bubble2b; OK; 0.089142; 0; ]
  [ bubble3; OK; 0.077227; 0; ]
  [ bubble4; OK; 0.084590; 0; ]
]
}
{
title: Append Post Condition;
title_group: StateMachine Operations;
file_name: test-setup_post_condition.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.109668; 0; ]
]
}
{
title: Append Post Condition;
title_group: StateMachine Operations;
file_name: test-setup_border_conditions.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.158749; 0; ]
]
}
{
title: Inverse;
title_group: StateMachine Operations;
file_name: test-StateMachine-inverse.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.076061; 1885217248; ]
]
}
{
title: Paralell;
title_group: StateMachine Operations;
file_name: test-parallelize.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.093088; 0; ]
]
}
{
title: Repetition with min and max repetition numbers;
title_group: StateMachine Operations;
file_name: test-repeat.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.083528; 0; ]
]
}
{
title: Repetitions Kleene closure 0 or arbitrary repetitions;
title_group: StateMachine Operations;
file_name: test-repeat-pure.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.072043; 0; ]
]
}
{
title: Sequence;
title_group: StateMachine Operations;
file_name: test-sequentialize.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.116151; 0; ]
]
}
{
title: Setup Pre-Condition;
title_group: StateMachine Operations;
file_name: test-setup_pre_condition.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.087531; 0; ]
]
}
{
title: Cloning;
title_group: Tracing origin;
file_name: test-StateMachine-trace-origin-clone.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.118970; 0; ]
]
}
{
title: Hopcroft optimization (minimize state set);
title_group: Tracing origin;
file_name: test-StateMachine-trace-origin-hopcroft-optimization.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.108519; 0; ]
]
}
{
title: NFA to DFA (subset construction);
title_group: Tracing origin;
file_name: test-StateMachine-trace-origin-create-DFA.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.069500; 0; ]
]
}
{
title: NFA to DFA (subset construction) II;
title_group: Tracing origin;
file_name: test-StateMachine-trace-origin-create-DFA-2.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.119594; 0; ]
]
}
{
title: Paralellization;
title_group: Tracing origin;
file_name: test-parallelize-trace-origin.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.087617; 0; ]
]
}
{
title: Has Trigger;
title_group: Trigger Set Check;
file_name: test-StateInfo-has_trigger.py;
hwut_info_time: 1479757922L;
result_list: [
  [ ; OK; 0.173529; 0; ]
]
}
