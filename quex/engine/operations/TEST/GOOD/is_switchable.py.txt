(1) Non-branchers: ___________________________________________________________

(1.1) Commands with no interferring access to registers ______________________

   A: if 'PreContext_0': position[PostContext_0]  = input_p;
   B: if 'PreContext_0': position[PostContext_1]  = input_p;

   is_switchable:  True

   A: Assign: { source=LoopRestartP, target=InputP,  }
   B: Assign: { source=CountReferenceP, target=LexemeStartP,  }

   is_switchable:  True

   A: ColumnCountAdd: { factor=1, value=2,  }
   B: LineCountAdd: { factor=1, value=3,  }

   is_switchable:  True

(1.2) Commands with interferring access to registers, solely read ____________

   A: InputPDereference
   B: if 'PreContext_0': position[PostContext_1]  = input_p;

   is_switchable:  True

   A: Assign: { source=CountReferenceP, target=InputP,  }
   B: Assign: { source=CountReferenceP, target=LexemeStartP,  }

   is_switchable:  True

   A: ColumnCountReferencePDeltaAdd: { column_n_per_chunk=5, pointer=InputP, subtract_one_f=False,  }
   B: Assign: { source=CountReferenceP, target=LoopRestartP,  }

   is_switchable:  True

(1.3) Commands with interferring access to registers, one read other write ___

   A: Assign: { source=LoopRestartP, target=InputP,  }
   B: if 'PreContext_0': position[PostContext_1]  = input_p;

   is_switchable:  False

   A: Assign: { source=CountReferenceP, target=InputP,  }
   B: Assign: { source=InputP, target=LexemeStartP,  }

   is_switchable:  False

   A: ColumnCountReferencePDeltaAdd: { column_n_per_chunk=5, pointer=CountReferenceP, subtract_one_f=False,  }
   B: Assign: { source=InputP, target=CountReferenceP,  }

   is_switchable:  False

(1.4) Commands with interferring access to registers, both write _____________

   A: if 'PreContext_0': position[PostContext_1]  = input_p;
   B: if 'PreContext_0': position[PostContext_1]  = input_p;

   is_switchable:  False

   A: Assign: { source=CountReferenceP, target=InputP,  }
   B: Assign: { source=InputP, target=InputP,  }

   is_switchable:  False

   A: ColumnCountReferencePDeltaAdd: { column_n_per_chunk=5, pointer=CountReferenceP, subtract_one_f=False,  }
   B: ColumnCountAdd: { factor=1, value=2,  }

   is_switchable:  False

(2) Branchers: _______________________________________________________________

   A: GotoDoorId: { door_id=DoorID(s=2, d=2),  }
   B: GotoDoorIdIfInputPNotEqualPointer: { door_id=DoorID(s=1, d=1), pointer=CountReferenceP,  }

   is_switchable:  False

   A: GotoDoorId: { door_id=DoorID(s=2, d=2),  }
   B: GotoDoorId: { door_id=DoorID(s=1, d=1),  }

   is_switchable:  False

   A: GotoDoorIdIfInputPNotEqualPointer: { door_id=DoorID(s=2, d=2), pointer=CountReferenceP,  }
   B: GotoDoorIdIfInputPNotEqualPointer: { door_id=DoorID(s=1, d=1), pointer=CountReferenceP,  }

   is_switchable:  False

