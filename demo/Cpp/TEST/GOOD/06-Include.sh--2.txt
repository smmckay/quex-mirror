## make lexer    
## Disable this message by compile option
##        '-DQUEX_OPTION_ASSERTS_EXT_WARNING_MESSAGE_DISABLED'
##
## Asserts activated! Lexical analyzer is 'paranoid'!
## => Even smallest misbehavior causes program exit.
##    This helps to find subtile errors.
##
## Note however: the paranoia is a heavy load on performance!
##
## Disable asserts by '-DQUEX_OPTION_ASSERTS_EXT_DISABLED'
##
## Report any bug at
##        http://sourceforge.net/tracker/?group_id=168259&atid=846112
,------------------------------------------------------------------------------------
| [START]
1: (1)IDENTIFIER	'Avant'
1: (7)IDENTIFIER	'la'
1: (10)IDENTIFIER	'premiere'
1: (19)IDENTIFIER	''include''
2: (1)INCLUDE	''
2: (9)IDENTIFIER	'auxiliary/hello.txt'
>> including: auxiliary/hello.txt
    1: (1)INCLUDE	''
    1: (9)IDENTIFIER	'auxiliary/bonjour.txt'
    >> including: auxiliary/bonjour.txt
        1: (1)IDENTIFIER	'Bonjour'
        1: (9)IDENTIFIER	'le'
        1: (12)IDENTIFIER	'monde'
        2: (1)INCLUDE	''
        2: (9)IDENTIFIER	'auxiliary/moin.txt'
        >> including: auxiliary/moin.txt
            1: (1)IDENTIFIER	'Moin'
            1: (6)IDENTIFIER	'Moin'
            2: (1)INCLUDE	''
            2: (9)IDENTIFIER	'auxiliary/hallo.txt'
            >> including: auxiliary/hallo.txt
                1: (1)IDENTIFIER	'Hallo'
                2: (1)<TERMINATION>	''
                Per File Letter Count = 5
            << return from include
            3: (1)IDENTIFIER	'Tschuess'
            4: (1)<TERMINATION>	''
            Per File Letter Count = 42
        << return from include
        3: (1)INCLUDE	''
        3: (9)IDENTIFIER	'auxiliary/hallo.txt'
        >> including: auxiliary/hallo.txt
            1: (1)IDENTIFIER	'Hallo'
            2: (1)<TERMINATION>	''
            Per File Letter Count = 5
        << return from include
        5: (1)<TERMINATION>	''
        Per File Letter Count = 65
    << return from include
    2: (1)IDENTIFIER	'Hello'
    2: (7)IDENTIFIER	'World'
    4: (1)<TERMINATION>	''
    Per File Letter Count = 38
<< return from include
3: (1)IDENTIFIER	'Apres'
3: (7)IDENTIFIER	'la'
3: (10)IDENTIFIER	'premiere'
3: (19)IDENTIFIER	''include''
4: (1)<TERMINATION>	''
Per File Letter Count = 74
| [END] number of token = 29
`------------------------------------------------------------------------------------
VALGRIND:   All heap blocks were freed -- no leaks are possible
